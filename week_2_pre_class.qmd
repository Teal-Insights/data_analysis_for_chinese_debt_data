# Week 2: Make Cool Charts, Right Away (Pre-Class) {#sec-week2_pre_class}

## Overview

This week we'll learn how to create compelling visualizations with `{ggplot2}`. Instead of starting with theory, we'll dive right in using Esquisse, a point-and-click interface. By making increasingly complex charts and examining the code they generate, you'll start to understand how ggplot2 works.

## Learning Objectives

By completing this pre-class work, you will be able to: 1. Create basic visualizations using Esquisse's point-and-click interface 2. Understand how aesthetic mappings control visual features 3. See how ggplot2 code relates to visual choices 4. Begin to read and understand ggplot2 code

## Setup

First, let's install Esquisse, load our libraries, and prepare our data.

Create a quarto file to use as a lab notebook, and save it in `week_2/R`.

Install esquisse:

```{r}
#| eval: false
pak::pkg_install("esquisse")
```

Next we'll load the packages we'll be using in this session.

```{r}
library(tidyverse)      # Data analysis tools, including ggplot2
library(chinadevfin3) # GCDF 3.0 data
library(esquisse)     # ggplot2 point-and-click add-in
```

## Create An Initial Dataset

In week three you will how to transform your data. For now, we'll do it for you. If you're curious what's happening in the code below, paste it into an LLM and ask it to explain what is happening step-by-step.

```{r}

# Helper function from Week 1
to_billions <- function(amount) {
  amount / 10^9
}

# Create dataset for exploring project characteristics
gcdf_project_features <- get_gcdf3_dataset() |>
  filter(
    recommended_for_aggregates == "Yes",
    !is.na(source_quality_score), 
    !is.na(data_completeness_score)
  ) |>
  mutate(
    total_amount_bn = to_billions(amount_constant_usd_2021),
    data_quality = source_quality_score + data_completeness_score
  ) |>
  select(
    total_amount_bn,
    data_quality,
    flow_class,
    commitment_year,
    total_source_count
  )
```

## Building Your First Visualization

Let's explore relationships between project size, data quality, and other features by building a visualization step by step. We'll use Esquisse to create the plot visually, then examine the code it generates to understand how ggplot2 works.

### Step 1: Basic Scatter Plot

1.  In RStudio, click Addins â†’ ggplot2 builder

![](images/week2_esquisse_addin.png){fig-alt="Esquisse R Studio Dropdown"}

2.  Select `gcdf_project_features` as your dataset

![](images/week2_esquisse_data_select.png){fig-alt="Select dataset in esquisse addin"}

3.  Create a basic scatter plot:

-   Drag `data_quality` to x-axis
-   Drag `total_amount_bn` to y-axis
-   Click "Point" in the geometry menu

![](images/week2_esquisse_aesthetics.png){fig-alt="Select esquisse aesthetic mappings"}

4.  Click the "Code" button at the bottom and copy the code

![](images/week2_esquisse_copy_code.png){fig-alt="esquisse copy code"}

Try running this code in R:

```{r}
ggplot(gcdf_project_features) +
  aes(x = data_quality, y = total_amount_bn) +
  geom_point(colour = "#112446") +
  theme_minimal()
```

Now that you understand how Esquisse works, let's build up our visualization step by step. Just follow the instructions at each stage, and remember to export and run the code to see how ggplot2 syntax matches your visual choices.

### Step 2: Add Color by Flow Class

In Esquisse, drag `flow_class` to the color box. Export and examine the new code:

```{r}
ggplot(gcdf_project_features) +
  aes(x = data_quality, 
      y = total_amount_bn,
      color = flow_class) +
  geom_point()
```

Notice how `color = flow_class` was added inside `aes()`. In ggplot2, `aes()` is where we map data variables to visual properties.

### Step 3: Size by Source Count

Add a third dimension to our visualization by mapping point size to the number of sources:
1. Drag `total_source_count` to the size box
2. Export and examine the code:

```{r}
ggplot(gcdf_project_features) +
  aes(x = data_quality, 
      y = total_amount_bn,
      color = flow_class,
      size = total_source_count) +
  geom_point()
```

Our visualization now shows several relationships simultaneously:
- Data quality (x-axis)
- Project size (y-axis)
- Number of sources (point size)
- Flow class (color)

### Step 4: Dealing with Overlapping Points

Looking at our plot, you can see many overlapping points. This happens because our data quality scores are whole numbers (0-10), so many projects have exactly the same score. We can fix this by switching to `geom_jitter()`:

```{r}
ggplot(gcdf_project_features) +
  aes(x = data_quality, 
      y = total_amount_bn,
      color = flow_class,
      size = total_source_count) +
  geom_jitter(width = 0.2) # Adds small random noise to spread points out
```

::: callout-tip
## What is jittering?
`geom_jitter()` adds a small amount of random noise to each point's position. This helps us see overlapping points without changing the fundamental patterns in our data. The `width` parameter controls how much horizontal jittering to apply - we use a small value (0.2) to maintain the connection to the original data quality scores.
:::

