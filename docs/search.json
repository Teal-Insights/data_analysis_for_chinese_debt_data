[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "",
    "text": "Preface\nThis textbook accompanies the intensive month-long course Applied Data Analysis For Chinese Overseas Lending Data Using R & LLMs developed for AidData research analysts. The course combines four weekly 90-minute online sessions with a full day of in-person instruction, designed to equip analysts with powerful new tools for data analysis, visualization, and automation.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#our-promise-to-you",
    "href": "index.html#our-promise-to-you",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "Our Promise to You",
    "text": "Our Promise to You\nBy the end of this course, you will be able to:\n\nTransform complex datasets into compelling visual stories\nAutomate those repetitive tasks that consume hours of your week\nCreate analyses that update automatically when new data arrives\nGenerate professional reports that combine narrative, code, and visuals\nLeverage AI tools to enhance your analytical capabilities\nSolve common data challenges more efficiently",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#our-teaching-philosophy",
    "href": "index.html#our-teaching-philosophy",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "Our Teaching Philosophy",
    "text": "Our Teaching Philosophy\nThink of R not as a programming language to master, but as a powerful toolkit that helps you tell stories with data. Just as you don’t need to be a mechanic to drive a car effectively, you don’t need to be a programmer to use R powerfully. This course focuses on giving you practical tools that will immediately enhance your analytical capabilities.\nWe embrace two key advantages that make this possible:\n\nModern Tools: The tidyverse ecosystem transforms R from a statistical programming language into an intuitive data analysis toolkit\nAI Assistance: Large Language Models (LLMs) act as your personal guide, helping you find and implement the right tools for each task",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what-makes-this-course-different",
    "href": "index.html#what-makes-this-course-different",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "What Makes This Course Different",
    "text": "What Makes This Course Different\nTraditional R courses often get bogged down in programming concepts before getting to practical applications. We flip this approach:\n\nStart with practical tools you can use immediately\nFocus on real AidData challenges and solutions\nUse AI tools to overcome technical hurdles\nBuild from practical application to deeper understanding",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#week-by-week-journey",
    "href": "index.html#week-by-week-journey",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "Week-by-Week Journey",
    "text": "Week-by-Week Journey\n\nWeek 1: First Steps with R\n\nSet up R & R Studio on your computer\nCreate your first data visualization\nLearn to use AI tools for coding assistance\nBegin working with Quarto for reproducible reports\n\n\n\nWeek 2: Data Visualization Mastery\n\nCreate publication-ready plots with ggplot2\nMaster the grammar of graphics\nBuild interactive visualizations\nDesign effective data presentations\n\n\n\nWeek 3: Data Transformation\n\nClean and reshape real development finance data\nMaster key data manipulation verbs\nReplicate analyses from AidData reports\nAutomate repetitive data tasks\n\n\n\nWeek 4: Advanced Topics\n\nHandle complex data cleaning challenges\nCreate reproducible workflows\nGenerate automated reports\nBuild functions for common tasks\n\n\n\nIn-Person Session\n\nWork on your own projects with expert guidance\nTackle advanced visualization challenges\nLearn to extract structured data from text using AI\nBuild confidence through hands-on practice",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#being-realistic-about-learning",
    "href": "index.html#being-realistic-about-learning",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "Being Realistic About Learning",
    "text": "Being Realistic About Learning\nYou won’t become an R expert in four weeks—and that’s okay. What you will achieve:\n\nMaster enough R to make your daily work easier and more efficient\nGet past the steepest part of the learning curve\nBuild confidence in your ability to learn more\nDevelop a foundation for continued learning",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#your-ai-learning-assistant",
    "href": "index.html#your-ai-learning-assistant",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "Your AI Learning Assistant",
    "text": "Your AI Learning Assistant\nLearning R in 2025 is fundamentally different from even a few years ago. Modern AI tools serve as 24/7 tutors that can:\n\nExplain complex code in plain English\nHelp debug your problems\nSuggest improvements to your code\nAnswer your questions any time\n\nThink of these AI tools as having a knowledgeable colleague1 always ready to help—they won’t do the work for you, but they’ll help you learn faster and overcome obstacles more efficiently.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-to-use-this-book",
    "href": "index.html#how-to-use-this-book",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "How to Use This Book",
    "text": "How to Use This Book\nThis book serves multiple purposes:\n\nA reference during the course\nA guide for self-paced learning\nA resource for future consultation\n\nEach chapter includes:\n\nClear learning objectives\nPractical examples using real data\nExercises to reinforce learning\nTips for using AI tools effectively\nResources for deeper learning\n\nLet’s begin this journey together. By the end of the course, you’ll have new tools and skills to analyze Chinese development finance data more effectively and efficiently than ever before.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Applied Data Analysis for Chinese Lending Data Using R & LLMs",
    "section": "",
    "text": "Sometimes that knowledgeable colleague is overconfident and incorrect. Use your human judgment.↩︎",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "week_1_pre_class.html",
    "href": "week_1_pre_class.html",
    "title": "1  Overview",
    "section": "",
    "text": "1.1 Learning Objectives\n`# Pre-Course Preparation {#sec-preclass}\nBefore our first class meeting, you’ll need to install some software and familiarize yourself with a few basic concepts. This preparation will ensure you can participate fully in class activities. While the steps are straightforward, please allow 45-60 minutes to complete everything comfortably.\nBy completing this pre-class work, you will be able to:",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#learning-objectives",
    "href": "week_1_pre_class.html#learning-objectives",
    "title": "1  Overview",
    "section": "",
    "text": "Install R and RStudio on your computer\nExplain the difference between R and RStudio\nPerform basic calculations in R\nCreate simple variables\nUse basic R functions\nUse AI tools to help understand R code",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#what-is-r",
    "href": "week_1_pre_class.html#what-is-r",
    "title": "1  Overview",
    "section": "1.2 What is R?",
    "text": "1.2 What is R?\nThink of R as two things working together: a powerful calculator designed specifically for data analysis, and a collection of tools that make that calculator more useful. R was created by statisticians in the 1990s to make data analysis more accessible and reproducible. Today, it’s one of the most popular tools for data analysis worldwide. It is free and open source.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#what-is-rstudio",
    "href": "week_1_pre_class.html#what-is-rstudio",
    "title": "1  Overview",
    "section": "1.3 What is RStudio?",
    "text": "1.3 What is RStudio?\nRStudio is like a workshop for R – it’s where you’ll actually do your work. If R is a powerful calculator, RStudio is the desk, notepad, file organizer, and reference library that makes using that calculator much easier. It’s called an IDE (Integrated Development Environment), but you can think of it as your data analysis workspace.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#what-are-r-packages",
    "href": "week_1_pre_class.html#what-are-r-packages",
    "title": "1  Overview",
    "section": "1.4 What are R Packages?",
    "text": "1.4 What are R Packages?\nPackages in R are like apps on your phone:\n\nYour phone comes with some basic apps (like R’s built-in functions)\nYou can install new apps (packages) to do specific tasks\nOnce installed, you need to open (load) an app to use it",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#what-is-the-tidyverse",
    "href": "week_1_pre_class.html#what-is-the-tidyverse",
    "title": "1  Overview",
    "section": "1.5 What is the tidyverse?",
    "text": "1.5 What is the tidyverse?\nThe tidyverse is like a bundle of the most useful data analysis apps, all designed to work together seamlessly. It includes tools for:\n\nCreating beautiful visualizations\nCleaning and organizing data\nImporting data from various sources\n\nThese tools are designed to be more intuitive and user-friendly than base R.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#installation-steps",
    "href": "week_1_pre_class.html#installation-steps",
    "title": "1  Overview",
    "section": "1.6 Installation Steps",
    "text": "1.6 Installation Steps\n\n1.6.1 1. Install R First\n\nGo to CRAN\nClick on your operating system\nDownload and run the installer\n\n\n\n1.6.2 2. Install RStudio Second\n\nGo to RStudio Download\nDownload and run the installer\n\n\n\n1.6.3 Need More Help?\nIf you run into any issues, you have two great options:\n\nTry an interactive tutorial\n\nThis will walk you through each step with detailed instructions\nIncludes screenshots and troubleshooting tips\n\nAsk a friendly LLM\n\nUse ChatGPT or Claude\nTry questions like: “I’m having trouble installing R on [your OS]. Here’s what I’ve tried…”\nThe LLM can provide customized help for your specific situation\n\n\n\n\n1.6.4 Verify Your Installation\nAfter installing both R and RStudio:\n\nOpen RStudio (not R)\nType 2 + 2 in the Console (bottom left)\nPress Enter\n\nIf you see [1] 4, you’re ready to go!\nIf not, ask your favorite LLM. Describe what your issue. Upload a screenshot if you are unsure.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#the-rstudio-interface",
    "href": "week_1_pre_class.html#the-rstudio-interface",
    "title": "1  Overview",
    "section": "1.7 The RStudio Interface",
    "text": "1.7 The RStudio Interface\n\n\n\nR Studio\n\n\nWhen you first open RStudio, you’ll likely see three panels. To see all four panels, click the “New File” icon in the top left corner and select “R Script”. Here’s what each panel does:\n\nSource Editor (top left): This is where you write and edit your R code files\n\nLike a text editor for your R scripts\nWhere you’ll write code you want to save and reuse\n\nConsole (bottom left): This is where you run R commands\n\nThink of it as R’s command center\nWhere you can try out code immediately\n\nEnvironment/History (top right): Shows your active variables and command history\n\nEnvironment tab lists all variables you’ve created\nHistory tab shows commands you’ve run\n\nFiles/Plots/Packages/Help (bottom right): A multi-purpose viewing area\n\nBrowse your files\nView plots and visualizations\nManage R packages\nAccess help documentation\n\n\n\n\n\n\n\n\nTip\n\n\n\nWant to learn more about RStudio’s features? Check out the RStudio IDE Cheat Sheet.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#basic-r-console-practice",
    "href": "week_1_pre_class.html#basic-r-console-practice",
    "title": "1  Overview",
    "section": "1.8 Basic R Console Practice",
    "text": "1.8 Basic R Console Practice\nOnce you have R and RStudio installed, try these commands in your RStudio console:\n\n1.8.1 R as a calculator\n\n2 * 3 + 4\n\n[1] 10\n\n10 / 2\n\n[1] 5\n\n2^3   # This means 2 to the power of 3\n\n[1] 8\n\n### Creating variables (we call this \"assignment\")\nx &lt;- 10    # The arrow means \"assign 10 to x\"\ny &lt;- 5\nx + y\n\n[1] 15\n\n### Using functions\nsum(1, 2, 3, 4, 5)\n\n[1] 15\n\nmean(c(1, 2, 3, 4, 5))    # c() combines numbers into a list\n\n[1] 3",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#installing-your-first-package-the-tidyverse",
    "href": "week_1_pre_class.html#installing-your-first-package-the-tidyverse",
    "title": "1  Overview",
    "section": "1.9 Installing Your First Package: The Tidyverse",
    "text": "1.9 Installing Your First Package: The Tidyverse\nJust as installing Microsoft Office gives you a whole suite of programs (Word, Excel, PowerPoint) at once, installing the tidyverse gives you a collection of R packages designed to work together seamlessly for data analysis. Let’s install it:\n\nType this command in your console:\n\n\ninstall.packages(\"tidyverse\")\n\nYou’ll see quite a bit of text appear as R downloads and installs multiple packages. This is normal! The tidyverse includes packages for:\nMaking plots (ggplot2) Working with data (dplyr) Reading data files (readr) And several others we’ll use throughout the course\nAfter installation completes, load the tidyverse:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nYou’ll see some messages about which packages were loaded. Don’t worry about understanding all of them now - we’ll learn about each one as we need it. ::: {.callout-note} You only need to install a package once on your computer (like installing Microsoft Office), but you need to load it with library() each time you start R (like opening Excel when you want to use it). :::",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#try-using-ai-to-learn-r",
    "href": "week_1_pre_class.html#try-using-ai-to-learn-r",
    "title": "1  Overview",
    "section": "1.10 Try Using AI to Learn R",
    "text": "1.10 Try Using AI to Learn R\nAI can be your extra-attentive tutor. Here’s a piece of code to ask an LLM about:\n\nflights |&gt;\n  group_by(carrier) |&gt;\n  summarize(\n    avg_delay = mean(dep_delay, na.rm = TRUE),\n    n = n()\n  ) |&gt;\n  arrange(desc(avg_delay))\n\nTry this prompt with ChatGPT or Claude:\n\n“I’m new to R. Can you explain what each line of this code does? Please explain it like you’re talking to someone who has never programmed before.”\n\nLLMs’ coding ability improves rapidly, so it’s worth using the frontier models. If you don’t already have access to the paid version of either Claude or ChatGPT, it is $20 a month well spent1.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#learning-resources",
    "href": "week_1_pre_class.html#learning-resources",
    "title": "1  Overview",
    "section": "1.11 Learning Resources",
    "text": "1.11 Learning Resources\nOne of R’s greatest strengths is its welcoming, active community that creates high-quality learning resources in many different formats. Everyone learns differently, so we’ve provided options to suit different learning styles. Remember: our course will get you started, but these resources can help you continue your journey.\n\n1.11.1 THE Textbook\nR for Data Science (2e) is the definitive guide to modern data analysis in R, and it’s completely free online. Much of this course’s approach is inspired by this book, but with a key difference: while R4DS teaches concepts using general datasets (like diamond prices and penguin measurements), we’ll apply these same concepts directly to Chinese development finance data.\nThink of R4DS as your comprehensive reference manual. When you want to: - Understand a concept more deeply - Learn additional approaches - Explore beyond what we cover in class - Review fundamentals\nThis should be your first stop. The authors (Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund) have a gift for clear explanation, and the book is constantly updated to reflect modern best practices.\n\n\n\n\n\n\nTip\n\n\n\nBookmark R for Data Science now - you’ll be referring to it often!\n\n\n\n\n1.11.2 Video Learning\nIf you prefer to learn by watching, check out “R Programming for ABSOLUTE Beginners” (14 minutes). This gentle introduction is perfect if you’re feeling uncertain about where to start.\n\n\n1.11.3 Interactive Learning\nDataCamp’s Introduction to R provides hands-on practice in an online environment with immediate feedback. While DataCamp is generally a paid platform, this introductory course is free. This format worked particularly well for me when I was learning R.\n\n\n1.11.4 Community Resources\nThe R community is known for being friendly and supportive. Here’s where to find help:\n\n#rstats on Bluesky: The active R community shares tips, resources, and help\nR-Ladies: A worldwide organization promoting gender diversity in the R community\nR-bloggers: An aggregator of R-related blogs and tutorials\n\n\n\n\n\n\n\nNote\n\n\n\nWe’ll provide a comprehensive resource list in Chapter X, but these should get you started. The R community’s commitment to sharing knowledge means you’ll never lack for learning materials!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#success-checklist",
    "href": "week_1_pre_class.html#success-checklist",
    "title": "1  Overview",
    "section": "1.12 Success Checklist",
    "text": "1.12 Success Checklist\nBefore coming to class, you should be able to:\n\nOpen RStudio\nPerform a calculation in the console\nCreate a variable\nUse a basic function\nInstall and load packages\nAsk an AI to explain R code",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_pre_class.html#footnotes",
    "href": "week_1_pre_class.html#footnotes",
    "title": "1  Overview",
    "section": "",
    "text": "As of the time of writing in January of 2025, Claude is the best for R, but ChatGPT 4o (and above) aren’t too far behind. This will change quickly as new models come out.↩︎",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Overview</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html",
    "href": "week_1_in_class.html",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "",
    "text": "2.0.1 Video Lecture\nWatch this video lecture to review the concepts from class 1:",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#todays-agenda-90-minutes",
    "href": "week_1_in_class.html#todays-agenda-90-minutes",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.1 Today’s Agenda (90 minutes)",
    "text": "2.1 Today’s Agenda (90 minutes)\n\nWelcome & Course Overview (15 min)\n\nCourse logistics\nLearning approach\nSetting expectations\n\nProject Setup (20 min)\n\nCreating organized folder structure\nInstalling key packages\nUnderstanding RStudio’s layout\n\nFirst Steps with R (25 min)\n\nWriting your first function\nBuilding analysis pipelines\nCreating visualizations\n\nAutomated Reporting (25 min)\n\nSetting up report templates\nGenerating multiple reports\nHands-on practice\n\nWrap-up & Preview (5 min)\n\nReview key takeaways\nPreview next week\nAdditional resources",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#welcome-course-overview",
    "href": "week_1_in_class.html#welcome-course-overview",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.2 Welcome & Course Overview",
    "text": "2.2 Welcome & Course Overview\nWelcome to Applied Data Analysis for Chinese Lending Data! Before we dive into R, let’s cover some course logistics:\n\nCourse Structure: 4 weekly online sessions + 1 full day in-person\nOnline Sessions: 90 minutes each, combining instruction and hands-on practice.\nMaterials: All course materials available in Quarto format\nSupport: Using AI tools (Claude, ChatGPT) for learning assistance. Slack channel. 1x1 support for any cool projects you want to pursue.\nQuestions: Ask questions anytime - no question is too basic!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#todays-focus-practical-tools-for-real-work",
    "href": "week_1_in_class.html#todays-focus-practical-tools-for-real-work",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.3 Today’s Focus: Practical Tools for Real Work",
    "text": "2.3 Today’s Focus: Practical Tools for Real Work\nAt AidData, you spend countless hours analyzing development finance data and creating reports. Today’s session focuses on three key areas that will help make this work more efficient:\n\nWorking in RStudio\n\nGet comfortable with the RStudio interface\nUnderstand how to organize your projects\nLearn where to find help when you need it\n\nUsing Quarto for Better Documentation\n\nKeep track of your analysis process (like a lab notebook)\nCreate professional-quality reports\nCombine code, text, and visualizations seamlessly\n\nProductivity-Enhancing Tools\n\nWrite functions to avoid repetitive work\nUse map functions to process multiple countries efficiently\nCreate parameterized reports that save time and reduce errors",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#learning-objectives-first-steps-toward-efficiency",
    "href": "week_1_in_class.html#learning-objectives-first-steps-toward-efficiency",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.4 Learning Objectives: First Steps Toward Efficiency",
    "text": "2.4 Learning Objectives: First Steps Toward Efficiency\nBy the end of today’s session, you’ll begin to:\n\nGet Started with Automated Reports\n\nSee how to transform manual reporting tasks into automated processes\nCreate your first parameterized report template\nUnderstand how to generate reports for multiple countries\n\nLearn About Analysis Pipelines\n\nSee how to make your analysis steps clear and reproducible\nStart building reusable analysis workflows\nGet introduced to tools for consistent results\n\nTake First Steps with Visualization\n\nCreate your first plots in R\nSee how to standardize visualizations across reports\nUnderstand how automated plotting can save time\n\nStart Working Smarter\n\nBegin reducing repetitive copy-paste work\nSee how automation can prevent common errors\nTake first steps toward reproducible analysis\n\n\nMost importantly, you’ll get hands-on experience with tools that can eventually save you hours of work each week. While mastering these tools takes time and practice, today you’ll see enough practical applications to understand their value. You’ll leave with working examples that you can build upon and adapt for your own work.\nThink of today as learning to drive a car - you won’t be a race car driver after one lesson, but you’ll understand the basics and see why it’s worth learning more. As the course progresses, we’ll build on these foundations and develop your skills further.\nLet’s get started!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#why-cool-things-first",
    "href": "week_1_in_class.html#why-cool-things-first",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.5 Why “Cool Things First”?",
    "text": "2.5 Why “Cool Things First”?\nTraditional programming courses often start with fundamentals: variables, loops, conditionals. That’s like learning about internal combustion before driving a car! Instead, we’ll:\n\nStart with exciting, practical applications\nBuild motivation to learn fundamental concepts as we need them\nUse AI tools to help us understand the details and learn faster\n\nOur goal is to show you what’s possible, then help you understand how it works.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#setting-up-your-work-environment",
    "href": "week_1_in_class.html#setting-up-your-work-environment",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.6 Setting Up Your Work Environment",
    "text": "2.6 Setting Up Your Work Environment\nLet’s create an organized workspace for this course. We’ll do this together - follow along on your computer:\n\n2.6.1 Creating a Project Structure\n\nIn RStudio, click File → New File → New Project\nClick “New Directory”\nClick “New Project”\nName it “data_analysis_bootcamp”\nChoose where to save it (remember this location!)\nClick “Create Project”\n\nNow let’s create an organized folder structure. Copy and paste this code into your R console:\n\n# Create week folders and their subfolders\nfor (week in 1:4) {\n  week_folder &lt;- paste0(\"week_\", week)\n  dir.create(week_folder)\n  \n  # Create standard subfolders\n  dir.create(file.path(week_folder, \"R\"))        # Scripts and Quarto documents\n  dir.create(file.path(week_folder, \"data-raw\")) # Original data files\n  dir.create(file.path(week_folder, \"data\"))     # Processed data\n  dir.create(file.path(week_folder, \"outputs\"))  # Generated reports and figures\n}\n\nThis will create:\ndata_analysis_bootcamp/\n├── week_1/\n│   ├── R/         # R scripts and Quarto documents\n│   ├── data-raw/  # Original data files\n│   ├── data/      # Processed data\n│   └── outputs/   # Generated reports and figures\n├── week_2/\n│   ├── R/\n│   ├── data-raw/\n│   ├── data/\n│   └── outputs/\n├── week_3/\n│   ├── R/\n│   ├── data-raw/\n│   ├── data/\n│   └── outputs/\n└── week_4/\n    ├── R/\n    ├── data-raw/\n    ├── data/\n    └── outputs/\n\n\n\n\n\n\nTip\n\n\n\nUse the Files pane in RStudio (bottom right) to verify that all folders were created correctly.\n\n\nEach week’s folder has:\n\nR/: Scripts and Quarto documents\ndata-raw/: Original, unmodified data\ndata/: Processed, analysis-ready data\noutputs/: Generated reports, figures, and other results\n\nFor this week’s automated reporting project, we’ll use:\n\nweek_1/R/ for our report template and functions\nweek_1/data-raw/ for any raw data we need to process\nweek_1/data/ for cleaned, ready-to-analyze data\nweek_1/outputs/ for our generated reports\n\n\n\n\n\n\n\nNote\n\n\n\nYou can also create folders using the Files pane in RStudio (bottom right) by clicking “New Folder”.\n\n\n\n\n2.6.2 Install & Load Packages\nThink of R packages like apps for your phone:\n\nYou install an app once\nYou open the app each time you want to use it\n\nSimilarly with R:\n\nYou install a package once\nYou load it with library() each time you start R\n\nThere are two main “app stores” for R packages:\n\nCRAN: The official R app store. Like the Apple App Store or Google Play Store, packages here go through review and testing\nGitHub: More like downloading apps directly from developers’ websites. Newer features, but less formal review\n\nLet’s install what we need:\n\n# First, install pak - our package installer\ninstall.packages(\"pak\")\n\n# Now use pak to install everything else\npak::pkg_install(\n  c(\n    \"quarto\",            # For report generation\n    \"t-emery/chinadevfin3\",  # From GitHub, GCDF 3.0 data package that I made\n    \"glue\",              # For working with text\n    \"tinytex\",           # For rendering pdfs\n    \"here\",              # For relative file paths,\n    \"withr\",             # For file system operations\n    \"fs\"                # For file system operations\n  )\n)\n\n# Special setup needed for PDF creation\ntinytex::install_tinytex() \n\n# If you haven't installed tidyverse yet (from pre-class setup):\n# pak::pkg_install(\"tidyverse\") # Core data science tools from CRAN\n\n\n\n\n\n\n\nTip\n\n\n\nThe c() function combines things together. We’ll use it often!\n\n\nNow let’s load the packages we’ll use:\n\nlibrary(tidyverse)      # Load core tools\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(chinadevfin3)   # Load GCDF 3.0 tools\nlibrary(glue)           # Load text tools\nlibrary(here)           # Load relative file paths\n\nhere() starts at /Users/teal_emery/Dropbox/DataScience/data_analysis_for_chinese_debt_data\n\n\n\n\n\n\n\n\nNote\n\n\n\nDon’t worry about the startup messages - they’re just telling us what was loaded.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#your-first-analysis-a-preview",
    "href": "week_1_in_class.html#your-first-analysis-a-preview",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.7 Your First Analysis: A Preview",
    "text": "2.7 Your First Analysis: A Preview\nBefore we dive into details, let’s see what we’re working toward. Copy and paste this code into RStudio:\n\n# Get data for Angola\nget_gcdf3_dataset() |&gt;\n  filter(\n    recommended_for_aggregates == \"Yes\",\n    country_name == \"Angola\"\n  ) |&gt;\n  group_by(commitment_year) |&gt;\n  summarize(\n    total_usd_bn = sum(amount_constant_usd_2021, na.rm = TRUE) / 10^9\n  ) |&gt;\n  ggplot(aes(x = commitment_year, y = total_usd_bn)) +\n  geom_col(fill = \"steelblue\") +\n  labs(\n    title = \"Chinese Development Finance to Angola\",\n    x = \"Year\",\n    y = \"Commitments (2021 USD, Billions)\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nDon’t worry if this looks intimidating - by the end of today:\n\nYou’ll understand what each part does\nYou’ll be able to modify it for your needs\nYou’ll know how to get AI help when stuck\n\nNext, we’ll break this down into reusable pieces and learn how to automate it for any country!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#introduction-to-quarto",
    "href": "week_1_in_class.html#introduction-to-quarto",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.8 Introduction to Quarto",
    "text": "2.8 Introduction to Quarto\nQuarto is a modern scientific and technical publishing system built for the way we work today. Think of it as a powerful document creator that lets you combine your narrative (text), code, and results all in one place. When you make changes to your analysis, everything updates automatically - no more copying and pasting results into Word! You can write once and publish to multiple formats like HTML, PDF, Word, and presentations. It’s like having a Swiss Army knife for creating data-driven documents.\n\n\n\n\n\n\nGetting Started Resources\n\n\n\n\nFollow along with the official Getting Started with Quarto in RStudio tutorial\nKeep the handy Quarto Cheatsheet nearby for quick reference\n\n\n\n\n2.8.1 Why Use Quarto?\nQuarto documents are:\n\nReproducible: Code and results stay in sync\nProfessional: Beautiful output in multiple formats\nFlexible: One source, many outputs\nVersion-controlled: Easy to track changes\nShareable: Others can see your code and results\n\n\n\n2.8.2 Real-World Use Cases\nQuarto shines in several different scenarios:\n\n2.8.2.1 1. Lab Notebook / Exploratory Analysis\n\nWrite text and execute code in the same document\nTrack your thought process and decisions\nDocument what worked (and what didn’t)\nKeep a record of your exploration\nThis follows the tradition of “literate programming” introduced by Donald Knuth\n\nHere’s an example of documenting your exploration:\n## Question: Do loan commitments vary by region?\n\n```{r}\n# First, let's look at Africa\nget_gcdf3_dataset() |&gt; \n  calculate_yearly_commitments(\"Angola\")\n```\nInteresting spike in 2016. Let's check another country...\n\n\n2.8.2.2 2. Professional Documents\n\nTurn your analysis directly into reports\nCreate presentations\nBuild websites and books\nGenerate multiple formats from one source\n\nIn fact, this textbook itself is written in Quarto! You can see exactly how this page was created by looking at the source code on GitHub: week_1_in_class.qmd\nThis means:\n\nYou can see how we practice what we preach\nYou can learn from the actual code we use\nYou have examples to reference for your own work\n\n\n\n\n\n\n\nTip\n\n\n\nAs you work through this course, try viewing the source code for different pages. It’s a great way to learn Quarto techniques!\n\n\n\n\n\n2.8.3 Your First Quarto Document\n\nClick File → New File → Quarto Document\nFill in:\n\nTitle: “Week 1: Getting Started”\nAuthor: Your name\nClick “Create”\n\n\nYou’ll see a template document with some example content. Let’s modify it:\n---\ntitle: \"Week 1: Getting Started\"\nauthor: \"Your Name\"\nformat: \n  html:\n    embed-resources: true # Makes HTML easily shareable\n  docx: default\n  pdf: default\n---\n\n\n\n\n\n\nSharing HTML Documents\n\n\n\nUsing embed-resources: true ensures your HTML document can be shared and opened by anyone. The file will be a bit larger, but this is only noticeable when working with very large datasets. For most purposes, the convenience of easy sharing is worth it!\n\n\n\n\n2.8.4 Basic Markdown\nMarkdown is a simple way to format text that’s easy to read and write. Think of it as a set of formatting shortcuts: instead of clicking buttons like in Word, you add special characters around your text. Here are the basics you’ll see in our example:\n\nUse # for headers (more # means smaller headers)\nWrap words in **bold** to make them bold\nWrap words in *italics* to make them italics\nStart lines with - or numbers for lists\n\nTry this example:\n## About This Course\n\nThis course will teach me to:\n- Create **beautiful** visualizations\n- Write *efficient* code\n- Generate professional reports\n\n1. First, we'll learn about projects\n2. Then we'll explore functions\n3. Finally, we'll create visualizations\nTry toggling between the Source and Visual editors at the top left of your RStudio window. The Visual editor shows formatting like Word, but we encourage using the Source editor to better understand how markdown works.\n\n\n\n\n\n\nTip\n\n\n\nThere’s much more you can do with markdown! Check out the Quarto Markdown Basics guide when you’re ready to explore.\n\n\n\n\n2.8.5 Adding Code\nA code chunk is like a special container in your document where you can write and run R code. Think of it as a mini R console embedded right in your document - anything between the ``` markers will be treated as R code, run by R, and the results will appear right below it. This lets you mix explanatory text with working code and see the results all in one place.\nClick the “Insert” button or press Ctrl+Alt+I (Cmd+Option+I on Mac) to insert a code chunk:\n```{r}\n# Let's do a simple calculation\n2 + 2\n```\nTo run this code, you have two easy options:\n\nClick the small green “play” button ▶️ in the top-right corner of the code chunk\nUse keyboard shortcuts:\n\nWindows/Linux: Ctrl+Shift+Enter to run the entire chunk\nMac: Cmd+Shift+Enter to run the entire chunk\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can also run a single line by placing your cursor on that line and pressing:\n\nWindows/Linux: Ctrl+Enter\nMac: Cmd+Enter\n\n\n\nSave your Quarto document as week_1_in_class in the week_1/R folder. It will save your Quarto document with a .qmd extension.\n\n\n2.8.6 Rendering Your Document\n\nClick the “Render” button\nQuarto will create three versions:\n\nHTML (great for web sharing)\nWord (for collaborating with non-R users)\nPDF (for formal documents)\n\n\n\n\n2.8.7 Practice Time\n\nAdd a section about what you hope to learn\nInsert a code chunk with a simple calculation\nTry different heading levels (## and ###)\nAdd some bold and italic text\nRender to all formats\n\n\n\n\n\n\n\nTip\n\n\n\nKeep this document! We’ll add to it throughout the class.\n\n\nNext, we’ll start adding some real analysis to our document!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#lets-start-building-functions-pipelines",
    "href": "week_1_in_class.html#lets-start-building-functions-pipelines",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.9 Let’s Start Building: Functions & Pipelines",
    "text": "2.9 Let’s Start Building: Functions & Pipelines\nNow that you’ve seen where we’re headed, let’s build this step by step. First, we’ll learn about two key concepts that make automation possible:\n\nFunctions: Write code once, use it many times\nPipes: Chain operations together clearly\n\nReady? Let’s dive in!\n\n2.9.1 Introduction to Functions: Making Your Code DRY and Error-Free\nOne of the fundamental principles of data analysis is DRY: Don’t Repeat Yourself. When you find yourself copying and pasting the same code multiple times, it’s time for a function. Functions help us: - Write code once and reuse it many times - Reduce the chance of errors from copy-paste mistakes - Make our code more readable and maintainable\nLet’s see this in action with a common task: making large numbers more readable.\n\n# Without a function - repetitive and error-prone\n1734483333 / 1000000000  # Convert to billions\n\n[1] 1.734483\n\n2847594938 / 1000000000  # Have to repeat the calculation\n\n[1] 2.847595\n\n5938273847 / 100000000  # Each repetition risks typos\n\n[1] 59.38274\n\n\nSpot the error above. It’s easy to make, and won’t always be as obvious to spot. Order of magnitude errors are surprisingly common, and quite embarrassing if you catch them afterwards.\nLet’s work hard to be lazy (and accurate), and make a function to do this:\n\n# With a function - write once, use many times\nto_billions &lt;- function(amount) {\n  amount / 10^9 # 10^9 = 1 billion, harder to mess up.\n}\n\n# Now it's easy and safe to convert any number\nto_billions(1734483333)  # Returns 1.73\n\n[1] 1.734483\n\nto_billions(2847594938)  # Returns 2.85\n\n[1] 2.847595\n\nto_billions(5938273847)  # Returns 5.94\n\n[1] 5.938274\n\n\nThis simple function shows us two key ideas:\n\nFunctions take an input and return an output\nFunctions help us do repetitive tasks easily\n\n\n\n2.9.2 Setting Up Our Analysis Tools\nNow let’s set up some more powerful functions for analyzing development finance data. Copy and paste this code block into RStudio:\n\n# Function to calculate yearly commitments for a country\ncalculate_yearly_commitments &lt;- function(data, country) {\n  data |&gt; \n    filter(\n      recommended_for_aggregates == \"Yes\",\n      country_name == country\n    ) |&gt; \n    group_by(\n      commitment_year,\n      flow_class\n    ) |&gt; \n    summarize(\n      amount_constant_usd_2021_bn = sum(\n        amount_constant_usd_2021, \n        na.rm = TRUE\n      ) |&gt; \n        to_billions(),\n      .groups = \"drop\"\n    )\n}\n\n# Function to create a visualization\nplot_loan_commitments &lt;- function(data, country) {\n  data |&gt; \n    ggplot(\n      aes(\n        x = commitment_year, \n        y = amount_constant_usd_2021_bn,\n        fill = flow_class\n      )\n    ) +\n    geom_col() +\n    labs(\n      title = str_glue(\"Chinese Development Finance Commitments to {country}\"),\n      subtitle = \"By Flow Class, 2000-2021\",\n      x = \"Commitment Year\",\n      y = \"Commitments (Constant 2021 USD, Billions)\",\n      fill = \"Flow Class\"\n    ) +\n    theme_minimal() +\n    scale_fill_brewer(palette = \"Set2\")\n}\n\nDon’t worry about understanding all this code yet! We’ll break it down later.\n\n\n2.9.3 Your First Analysis Pipeline\nNow we can use these functions to analyze development finance:\n\n# With pipes - clear and readable\nget_gcdf3_dataset() |&gt; \n  calculate_yearly_commitments(country = \"Angola\") |&gt; \n  plot_loan_commitments(country = \"Angola\")\n\n\n\n\n\n\n\n\nLet’s read this pipeline using “and then”:\n\nGet the GCDF dataset AND THEN\nCalculate yearly commitments for Angola AND THEN\nCreate a plot showing those commitments\n\n\n\n2.9.4 Why Pipes Make Life Easier\nThe pipe operator (|&gt;) simply takes what comes before it and puts it into the first argument of what comes after it. It’s that simple! Here’s our analysis without pipes:\n\n# Without pipes - like Excel formulas, hard to read and debug!\nplot_loan_commitments(calculate_yearly_commitments(get_gcdf3_dataset(), country = \"Angola\"), country = \"Angola\")\n\n\n\n\n\n\n\n\nSee how much harder that is to read? You have to read from the inside out, just like those nested Excel formulas that give everyone headaches! The pipe makes our code read like a story - first we do this, then we do that, then we do the next thing.\n\n\n\n\n\n\nA Tale of Two Pipes: |&gt; vs %&gt;%\n\n\n\nR has two pipe operators that both do the same basic job - they help make code more readable by passing data through a sequence of functions:\n\n|&gt; is the native R pipe (added in R 4.1)\n%&gt;% is the magrittr pipe (from the tidyverse)\n\nEither works fine, but we recommend using the native pipe |&gt; since it’s now built into R. You can set this as your default in RStudio under Tools → Global Options → Code → “Use native pipe operator”.\nKeyboard shortcut for adding a pipe:\n\nMac: Cmd+Shift+M\nWindows: Ctrl+Shift+M\n\n\n\n\n\n2.9.5 Understanding Our Code with AI\nLet’s use Claude or ChatGPT to understand our code better. Try these prompts:\n\nFor our simple function:\n\n\"Can you explain how this function works?\"\n\nto_billions &lt;- function(amount) {\n  amount / 10^9\n}\"\n\nFor understanding the pipeline:\n\n\"Can you explain what each step of this pipeline does?\n\nget_gcdf3_dataset() |&gt; \n  calculate_yearly_commitments(country = 'Angola') |&gt; \n  plot_loan_commitments(country = 'Angola')\"\n\n\n2.9.6 Understanding Complex Functions with AI\nNow let’s look at a more sophisticated function. We’ll use AI to help us understand how it works:\nTry this prompt with Claude, ChatGPT, or DeepSeek:\n\n“I’m new to R and trying to understand this function. Could you explain what each line does in simple terms? Please be specific about what each function (like filter, group_by, and summarize) is doing with our data.\n\n\ncalculate_yearly_commitments &lt;- function(data, country) {\n  data |&gt; \n    filter(\n      recommended_for_aggregates == 'Yes',\n      country_name == country\n    ) |&gt; \n    group_by(\n      commitment_year,\n      flow_class\n    ) |&gt; \n    summarize(\n      amount_constant_usd_2021_bn = sum(\n        amount_constant_usd_2021, \n        na.rm = TRUE\n      ) |&gt; \n        to_billions(),\n      .groups = 'drop'\n    )\n}\n\n\n\n2.9.7 Practice Time\nLet’s try some analyses:\n\nUse to_billions() with some large numbers\nModify the country in our pipeline to analyze different countries\nUse AI to help understand any patterns you see\n\n\n\n\n\n\n\nTip\n\n\n\nWhen you see an interesting pattern in your visualization, paste a screenshot into your favorite LLM and ask: “Why might [country] show high commitments in [year]?”\nThis is a great way to test the limits of AI. As domain experts, you probably know exactly why commitments spiked in certain years. Compare what the AI says with your expert domain knowledge - you might be surprised by how often it makes confident but incorrect assertions! This is a valuable lesson in both the power and limitations of AI tools.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#work-smarter-not-harder-automating-repetitive-tasks-with-map-functions",
    "href": "week_1_in_class.html#work-smarter-not-harder-automating-repetitive-tasks-with-map-functions",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.10 Work Smarter, Not Harder: Automating Repetitive Tasks with Map Functions",
    "text": "2.10 Work Smarter, Not Harder: Automating Repetitive Tasks with Map Functions\n\n2.10.1 The Problem: Repetitive Analysis\nLet’s say we want to analyze several countries. We could copy and paste our code:\n\n# Analysis for Pakistan\nget_gcdf3_dataset() |&gt; \n  calculate_yearly_commitments(\"Pakistan\") |&gt; \n  plot_loan_commitments(\"Pakistan\")\n\n\n\n\n\n\n\n# Analysis for Ethiopia\nget_gcdf3_dataset() |&gt; \n  calculate_yearly_commitments(\"Ethiopia\") |&gt; \n  plot_loan_commitments(\"Ethiopia\")\n\n\n\n\n\n\n\n# Analysis for Sri Lanka...\n\nBut this is: - Tedious to write - Easy to make mistakes - Hard to maintain - Not scalable (imagine doing this for 100 countries!)\n\n\n2.10.2 A Better Way: Map Functions\nInstead of repeating ourselves, we can tell R to do something for each item in a list. Here’s a simple example using our to_billions() function:\n\n# Some amounts to convert\namounts &lt;- c(1000000000, 2000000000, 3000000000)\n# Instead of:\nto_billions(amounts[1])\n\n[1] 1\n\nto_billions(amounts[2])\n\n[1] 2\n\nto_billions(amounts[3])\n\n[1] 3\n\n# We can just write:\nmap_dbl(\n    amounts,          # The list of values we want to work with\n    to_billions      # The function to apply to each value (no parentheses needed!)\n)\n\n[1] 1 2 3\n\n\nThe map_dbl() function:\n\nTakes a list of things (our amounts)\nDoes something to each thing (applies to_billions)\nReturns a list of results\n\n\n\n\n\n\n\nMap Functions vs For Loops\n\n\n\nIf you’ve programmed before, you might be familiar with for loops. Both map functions and for loops let you repeat tasks, but map functions are often clearer to read and harder to mess up. Compare these approaches:\n```{r}\n# For loop approach\nresults &lt;- numeric(length(amounts))  # Have to pre-allocate\nfor(i in seq_along(amounts)) {      # Need to manage indices\n    results[i] &lt;- to_billions(amounts[i])\n}\n\n# Map approach\nresults &lt;- map_dbl(amounts, to_billions)  # Clear and concise\n```\nWhy tidyverse prefers map functions:\n\nThey’re simpler to read and write\nThey protect your data from accidental modifications (a common pitfall with for loops)\n\n\n\n\n\n\n\n\n\nMap Functions Family\n\n\n\n\nWe use map_dbl() because we know we want numbers (doubles) back\nThere’s also map() for general use, map_chr() for text, etc.\nSee the full purrr map documentation for more mapping functions\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nNotice that when we use to_billions in map_dbl(), we don’t include the parentheses. Think of it as giving R the recipe (the function) rather than the finished dish (the result of calling the function).\n\n\n\n\n2.10.3 Analyzing Multiple Countries\nLet’s apply this to our country analysis:\n\n# List of countries we want to analyze\ncountries &lt;- c(\"Pakistan\", \"Ethiopia\", \"Sri Lanka\")\n\n# First, let's make a function that does our whole analysis\nanalyze_country &lt;- function(country) {\n  get_gcdf3_dataset() |&gt; \n    calculate_yearly_commitments(country) |&gt; \n    plot_loan_commitments(country)\n}\n\n# Now we can easily analyze any country\nanalyze_country(\"Sri Lanka\")\n\n\n\n\n\n\n\n# And we can use map to do many countries\n# map(data to work with, function to apply)\nplots &lt;- map(\n  countries,        # First argument: list of countries\n  analyze_country   # Second argument: what to do with each country\n)\n\nLet’s break down what’s happening:\n\nWe create a list of countries\nmap() takes each country and…\nRuns our analysis pipeline for that country\nSaves all the plots in a list\n\n\n\n2.10.4 Why This Matters\nThis approach:\n\nMakes your code more concise and readable\nReduces chances for error\nMakes it easy to add or remove countries\nScales effortlessly (100 countries takes the same amount of code)\n\n\n\n2.10.5 Practice Time\nLet’s try some exercises:\n\nBasic mapping:\n\n\n# Convert these amounts to billions\nbig_numbers &lt;- c(1234567890, 9876543210, 5555555555)\nmap_dbl(big_numbers, to_billions)\n\n[1] 1.234568 9.876543 5.555556\n\n\n\nTry with different countries:\n\n\n# Analyze your own list of countries\nyour_countries &lt;- c(\"Vietnam\", \"Indonesia\", \"Laos\")\nmap(your_countries, analyze_country)  # Simple and clear!\n\n[[1]]\n\n\n\n\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n\n\n\n\n\nCalculate total commitments:\n\n\n# First, make a function for the calculation\nget_total_commitments &lt;- function(country) {\n  get_gcdf3_dataset() |&gt; \n    calculate_yearly_commitments(country) |&gt; \n    summarize(total = sum(amount_constant_usd_2021_bn)) |&gt; \n    pull(total)\n}\n\n# Then use it with map_dbl\n# map_dbl(data to work with, function to apply)\nmap_dbl(\n  your_countries,        # First argument: list of countries\n  get_total_commitments  # Second argument: what to do with each country\n)\n\n[1] 28.94673 55.18729 21.56447\n\n\n\n\n\n\n\n\nGetting Help from AI\n\n\n\nTry this prompt to understand map functions better:\n\"I'm new to R and trying to understand this code. Can you explain what map_dbl does and how it's different from a regular for loop?\n\n```{r}\namounts &lt;- c(1000000000, 2000000000, 3000000000)\nmap_dbl(amounts, to_billions)\n```\n\n\n\n\n2.10.6 Next Steps\nNow that we can easily work with multiple countries at once, we’re ready to learn how to generate automated reports. The same principles we just learned about doing things repeatedly will help us create professional reports for any country with just a few lines of code!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#creating-reports-for-multiple-countries",
    "href": "week_1_in_class.html#creating-reports-for-multiple-countries",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.11 Creating Reports for Multiple Countries",
    "text": "2.11 Creating Reports for Multiple Countries\n\n2.11.1 The Problem: Manual Report Creation\nImagine your boss asks for reports on Chinese development finance in:\n\nAll countries in Southeast Asia\nEvery country with commitments over $1 billion\nThe top 10 recipient countries\n\nWithout automation, you’d need to:\n\nCopy your Quarto template\nChange the country name in multiple places\nRender each report separately\nKeep track of all the files\n\nLet’s automate this!\n\n\n2.11.2 Step 1: Save Our Functions\nFirst, let’s save our functions in week_1/R/functions.R:\n\n# week_1/R/functions.R\n\n# Convert to billions for readability\nto_billions &lt;- function(amount) {\n  amount / 10^9\n}\n\n# Calculate yearly commitments for a country\ncalculate_yearly_commitments &lt;- function(data, country) {\n  data |&gt; \n    filter(\n      recommended_for_aggregates == \"Yes\",\n      country_name == country\n    ) |&gt; \n    group_by(\n      commitment_year,\n      flow_class\n    ) |&gt; \n    summarize(\n      amount_constant_usd_2021_bn = sum(\n        amount_constant_usd_2021, \n        na.rm = TRUE\n      ) |&gt; \n        to_billions(),\n      .groups = \"drop\"\n    )\n}\n\n# Create visualization\nplot_loan_commitments &lt;- function(data, country) {\n  data |&gt; \n    ggplot(\n      aes(\n        x = commitment_year, \n        y = amount_constant_usd_2021_bn,\n        fill = flow_class\n      )\n    ) +\n    geom_col() +\n    labs(\n      title = str_glue(\"Chinese Development Finance Commitments to {country}\"),\n      subtitle = \"By Flow Class, 2000-2021\",\n      x = \"Commitment Year\",\n      y = \"Commitments (Constant 2021 USD, Billions)\",\n      fill = \"Flow Class\"\n    ) +\n    theme_minimal() +\n    scale_fill_brewer(palette = \"Set2\")\n}\n\n\n\n2.11.3 Step 2: Create a Report Template\nNow create a new file called week_1/R/country_report.qmd:\n---\ntitle: \"Chinese Development Finance in `{r} params$country`\"\nauthor: \"Your Name\"\ndate: today\nformat: \n  html:\n    theme: cosmo\n    toc: true\n    embed-resources: true\nparams:\n  country: \"Angola\"  # Default country\n---\n\n\n\n\n\n\nTip\n\n\n\nThe params: section is like fill-in-the-blanks for our report. We can change these values when we render the report.\n\n\nAdd this content to the report template:\n```{r}\n#| label: setup\n#| include: false\n\n# Load required packages\nlibrary(tidyverse)\nlibrary(chinadevfin3)\nlibrary(glue)\nlibrary(here)\n\n# Load our functions\nsource(here::here(\"week_1\", \"R\", \"functions.R\"))\n```\n\n## Overview\n\nThis report analyzes Chinese development finance commitments to `{r} params$country`.\n\n## Visualization\n\n```{r}\n#| label: commitments-plot\nget_gcdf3_dataset() |&gt; \n  calculate_yearly_commitments(params$country) |&gt; \n  plot_loan_commitments(params$country)\n```\n\n## Summary Statistics\n\n```{r}\n#| label: summary-stats\ncommitments &lt;- get_gcdf3_dataset() |&gt; \n  calculate_yearly_commitments(params$country)\n\ntotal_commitment &lt;- commitments |&gt; \n  summarize(total = sum(amount_constant_usd_2021_bn)) |&gt; \n  pull(total) |&gt; \n  round(2)\n```\n\nTotal commitments to `{r} params$country` from 2000-2021: \n$`{r} total_commitment` billion (2021 USD)\n\n\n\n\n\n\nThe {here} Package: Making File Paths Work Everywhere\n\n\n\nEver tried opening someone else’s R project and gotten errors like “file not found” even though you can see the file right there? This happens because of absolute file paths like:\n\nWindows: \"C:/Users/YourName/Documents/Project/data.csv\"\nMac: \"/Users/YourName/Documents/Project/data.csv\"\n\nThese paths only work on the original computer! Even relative paths like \"../data/file.csv\" can break if you:\n\nOpen your project from a different folder\nShare your code with colleagues\nMove your files around\n\nThe {here} package solves this by:\n\nAutomatically finding your project root folder\nBuilding file paths that work everywhere\n\nInstead of:\nsource(\"../R/functions.R\")  # Fragile!\nUse:\nsource(here::here(\"week_1\", \"R\", \"functions.R\"))  # Robust!\nThis works regardless of:\n\nWhat computer you’re on\nWhere you opened the project\nWhat your working directory is\n\n\n\n\n\n2.11.4 Step 3: Create a Rendering Script\nCreate a new file called week_1/R/render_reports.R:\n\n# week_1/R/render_reports.R\nlibrary(tidyverse)  # For data manipulation and pipe operator\nlibrary(quarto)     # For rendering Quarto documents\nlibrary(here)       # For reliable file paths\nlibrary(withr)     # For safe working with file paths\nlibrary(fs)         # For file system operations\n\n# List of countries to analyze\nsea_countries &lt;- c(\n  \"Vietnam\", \n  \"Indonesia\", \n  \"Thailand\", \n  \"Malaysia\"\n)\n\n# Function to render a report for one country\nrender_country_report &lt;- function(country) {\n  # Create output directory if it doesn't exist\n  output_dir &lt;- here::here(\"week_1\", \"outputs\")\n  dir_create(output_dir)\n  \n  # We'll use withr::with_dir() instead of setwd()\n  # It automatically restores the working directory when done\n  withr::with_dir(\n    here::here(\"week_1\", \"R\"),\n    {\n      # Render the Quarto document\n      quarto::quarto_render(\n        input = \"country_report.qmd\",\n        output_file = str_glue(\"{country}_analysis.html\"),\n        execute_params = list(country = country)\n      )\n      \n      # Move the rendered file to outputs directory\n      file_move(\n        path = str_glue(\"{country}_analysis.html\"),\n        new_path = path(output_dir, str_glue(\"{country}_analysis.html\"))\n      )\n    }\n  )\n}\n\n# Create a safer version of our render function that won't error\nsafe_render &lt;- possibly(\n  render_country_report,\n  otherwise = \"Failed to render report\" # What to return if there's an error\n)\n\n# Generate reports and capture results\nresults &lt;- map(\n  sea_countries,\n  safe_render\n)\n\n# Check for any failures\nfailed_countries &lt;- sea_countries[results == \"Failed to render report\"]\nif (length(failed_countries) &gt; 0) {\n  message(\"Failed to render reports for: \", str_c(failed_countries, collapse = \", \"))\n}\n\n\n\n2.11.5 Step 4: Generate Reports\n\nOpen week_1/R/render_reports.R in RStudio\nClick “Source” (or press Cmd/Ctrl + Shift + S)\nCheck week_1/outputs/ for your generated reports!\n\nYou should see:\n\nvietnam_analysis.html\nindonesia_analysis.html\nthailand_analysis.html\nmalaysia_analysis.html\n\n\n\n2.11.6 Real-World Applications\nThis approach is incredibly powerful for:\n\nRegular Reporting\n\nWeekly/monthly/quarterly updates\nReports for different stakeholders\nCountry monitoring\n\nAd Hoc Analysis\n\nQuick responses to specific requests\nComparative analysis across regions\nDeep dives into specific countries\n\nQuality Control\n\nConsistent analysis across reports\nEasy to spot unusual patterns\nReproducible results\n\n\n\n\n2.11.7 Practice Time\nLet’s try some exercises:\n\nAdd a new visualization to country_report.qmd\nGenerate reports for a different set of countries\nAdd more summary statistics to the report\n\n\n\n\n\n\n\nFile Organization\n\n\n\nRemember:\n\nR scripts and Quarto documents go in R/\nGenerated reports go in outputs/\nUse relative paths (like \"R/functions.R\" and \"../outputs/\")",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#wrapping-up-the-cool-things-first-approach",
    "href": "week_1_in_class.html#wrapping-up-the-cool-things-first-approach",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.12 Wrapping up: The Cool Things First Approach",
    "text": "2.12 Wrapping up: The Cool Things First Approach\nThe data science workflow typically follows these steps:\n\nGet Data: Import and clean your data\nTransform Data: Calculate summaries and find patterns\nCommunicate: Create visualizations and reports\n\nLook at our analysis pipeline:\n\nget_gcdf3_dataset() |&gt;                     # Step 1: Get Data\n  calculate_yearly_commitments(\"Angola\") |&gt; # Step 2: Transform\n  plot_loan_commitments(\"Angola\")          # Step 3: Communicate\n\n\n\n\n\n\n\n\nBut here’s the twist: we’re learning these steps in reverse! Why?\n\nWeek 1 & 2: Communication (Reporting & Data Visualization)\n\nBecause seeing your results is exciting!\nCreates motivation to learn the underlying steps\n\nWeek 3: Data Transformation\n\nNow that we know what we want to show, we’ll learn how to wrangle data into shape\nFind actionable insights from dirty real world data\n\nWeek 4: Data Import & Cleaning\n\nThe foundation of all good analysis\nLLMs make data cleaning much easier\n\n\n\n\n\n\n\ngraph TB\n    %% Standard Workflow\n    subgraph Traditional[\"Data Science Workflow\"]\n        A(\"Get Data&lt;br&gt;(Import & Clean)\") --&gt; B(\"Transform Data&lt;br&gt;(Analyze & Summarize)\")\n        B --&gt; C(\"Communicate&lt;br&gt;(Visualize & Report)\")\n    end\n    \n    %% Our Learning Path\n    subgraph Course[\"Our Learning Path\"]\n        direction TB\n        W1(\"Week 1:&lt;br&gt;Introduction to Quarto&lt;br&gt;(Professional Reports)\")\n        W2(\"Week 2:&lt;br&gt;Data Visualization&lt;br&gt;(The Fun Part!)\")\n        W3(\"Week 3:&lt;br&gt;Data Transformation&lt;br&gt;(Making Data Useful)\")\n        W4(\"Week 4:&lt;br&gt;Data Import & Cleaning&lt;br&gt;(Building Strong Foundations)\")\n        W1 --&gt; W2\n        W2 --&gt; W3\n        W3 --&gt; W4\n    end\n\n    %% Connecting arrow with explanation\n    C -..-&gt; W1\n    \n    %% Styles for better visualization - now with fill colors\n    style A fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n    style B fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    style C fill:#e8f5e9,stroke:#2e7d32,stroke-width:2px\n    \n    style W1 fill:#e8f5e9,stroke:#2e7d32,stroke-width:2px\n    style W2 fill:#e8f5e9,stroke:#2e7d32,stroke-width:2px\n    style W3 fill:#e3f2fd,stroke:#1976d2,stroke-width:2px\n    style W4 fill:#fff3e0,stroke:#f57c00,stroke-width:2px\n\n\n\n\n\n\nThis cool things first approach helps you:\n\nSee the value of R immediately\nBuild motivation through quick wins\nUnderstand why each step matters\nProvides the motivation to learn the details of why code works",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_1_in_class.html#wrapping-up-what-weve-accomplished",
    "href": "week_1_in_class.html#wrapping-up-what-weve-accomplished",
    "title": "2  Week 1: Getting Started (In-Class)",
    "section": "2.13 Wrapping Up: What We’ve Accomplished",
    "text": "2.13 Wrapping Up: What We’ve Accomplished\n\n2.13.1 Today’s Achievements\nLet’s look back at what we’ve accomplished in just 90 minutes:\n\nGetting Comfortable with RStudio\n\nSet up an organized project structure\nLearned to navigate the RStudio interface\nCreated our first R scripts and Quarto documents\n\nTaking First Steps with Quarto\n\nCreated our first Quarto document\nCombined code, text, and visualizations\nGenerated reports in multiple formats\n\nBuilding Efficiency Tools\n\nWrote our first function to avoid repetitive work\nUsed map functions to process multiple countries\nCreated a parameterized report template\n\n\nMost importantly, you’ve seen how these tools can make your work at AidData more efficient and reproducible. While it takes time to master these skills, you now have working examples that you can build upon and adapt for your own analysis needs.\n\n\n2.13.2 Resources for Continued Learning\n\n2.13.2.1 R Fundamentals\nEven with AI assistance, a solid foundation in R basics will make you much more effective. Here are some excellent starting points:\n\nInteractive Learning\n\nDataCamp’s Free Introduction to R\n\nRecommended starting point\nCovers essential R concepts\nInteractive exercises with immediate feedback\n\n\nVideo Tutorial\n\nR Programming Crash Course (1 hour)\n\nQuick overview of key concepts\nGood for visual learners\nCovers most common operations\n\n\n\n\n\n2.13.2.2 Quarto Documentation & Tutorials\n\nOfficial Resources\n\nQuarto Documentation\n\nComprehensive reference\nMany examples and tutorials\n\nGetting Started with Quarto (Video)\n\nExcellent visual introduction\nShows Quarto in action\n\n\nBook Chapters\n\nR for Data Science (2e):\n\nChapter 29: Quarto\nChapter 30: Quarto Formats\n\n\n\n\n\n2.13.2.3 Functions & Iteration\n\nR for Data Science Chapters\n\nWriting Functions\n\nComprehensive guide to function writing\nBest practices and examples\n\nIteration\n\nDeep dive into map functions\nPractical examples\n\n\nAdditional Resources\n\npurrr documentation\n\nReference for map functions\nComprehensive examples\n\nWalk This Way: A gentle introduction to purrr\n\nBeginner-friendly blog post\nClear explanations and examples\n\n\n\n\n\n\n2.13.3 Next Steps\n\nPractice with Your Own Data\n\nTry modifying today’s examples for your specific needs\nStart small - maybe automate one regular task\nUse AI tools to help understand and adapt code\n\nPrepare for Next Week\n\nWe’ll dive deeper into data visualization\nFocus on creating compelling graphics for Chinese development finance data\nBuild on the foundations we’ve established today\n\nGet Help When Needed\n\nUse AI tools (Claude, ChatGPT) for code explanation\nReference the resources above\nAsk questions in our course forum\nShare challenges and solutions with colleagues\n\n\nRemember: Learning R is a journey. You don’t need to memorize everything - knowing where to find help is often more important than memorizing syntax. Focus on understanding the concepts and how they can make your work easier and more reproducible.\nSee you next week!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Week 1: Getting Started (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html",
    "href": "week_2_pre_class.html",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "",
    "text": "3.1 Overview\nThis pre-class preparation should take about 45 minutes to complete.\nBefore we dive into code, let’s understand what we’re about to learn. {ggplot2} is an incredibly powerful data visualization tool used by data journalists at the Financial Times, The Economist, and other leading publications. With it, you can create virtually any visualization you can imagine - from simple scatter plots to complex, publication-ready graphics. And it’s completely free.\nWhile it takes practice to create professional-level visualizations, the basics are surprisingly accessible. The secret lies in understanding ggplot2’s underlying system: the Grammar of Graphics. Just as you can create endless sentences from basic grammar rules, you can create endless visualizations by combining basic graphical elements.\nToday, we’ll start by building this intuition. Instead of getting bogged down in syntax, we’ll use a point-and-click interface called Esquisse to create increasingly sophisticated visualizations. As we do this, we’ll examine the code it generates to understand how ggplot2 builds plots layer by layer.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#overview",
    "href": "week_2_pre_class.html#overview",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "",
    "text": "3.1.1 Video Lecture\nWatch this video lecture before our interactive session:",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#learning-objectives",
    "href": "week_2_pre_class.html#learning-objectives",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.2 Learning Objectives",
    "text": "3.2 Learning Objectives\nBy completing this pre-class work, you will:\n\nLearn to create visualizations using Esquisse’s point-and-click interface\nUnderstand how ggplot2 builds plots by layering:\n\nData\nGeometric shapes (points, lines, bars)\nVisual mappings (color, size, position)\nScales\nLabels and themes\n\nKnow where to find help and resources for continued learning\n\n\n\n\n\n\n\nUsing AI to Learn ggplot2\n\n\n\nLarge Language Models (LLMs) like ChatGPT and Claude are excellent learning companions for ggplot2. You can:\n\nGet Code Explanations:\n# Ask: \"Can you explain what each line of this code does?\"\nggplot(data) +\n  aes(x = year, y = amount) +\n  geom_point()\nUnderstand Concepts:\n\n\n“Why do we use + instead of |&gt; in ggplot2?”\n“What’s the difference between color and fill?”\n“When should I use geom_bar() vs geom_col()?”\n\n\nGet Visualization Suggestions:\n\n\n“I want to show the distribution of project sizes by region. What’s the best way to visualize this?”\n“How can I make this plot more readable?”\n\n\nDebug Issues:\n\n\nShare your code and error messages\nAsk for suggestions to improve your plots",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#setup",
    "href": "week_2_pre_class.html#setup",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.3 Setup",
    "text": "3.3 Setup\nLet’s get our workspace ready. First, create a new Quarto file to use as your lab notebook:\n\nIn RStudio, click File → New File → Quarto Document\nSave it as week_2_visualization_preclass.qmd in your week_2/R folder\n\nNext, we’ll install Esquisse, a tool that will help us learn ggplot2 visually:\n\npak::pkg_install(\"esquisse\")\n\nNow load the packages we’ll need:\n\nlibrary(tidyverse)    # Core data science tools, including ggplot2\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(chinadevfin3) # GCDF 3.0 data\nlibrary(esquisse)     # ggplot2 point-and-click interface",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#create-an-initial-dataset",
    "href": "week_2_pre_class.html#create-an-initial-dataset",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.4 Create An Initial Dataset",
    "text": "3.4 Create An Initial Dataset\nBefore we start visualizing, let’s prepare some interesting data to work with. The code below creates a dataset that combines project sizes, data quality scores, and other features that might help us understand patterns in Chinese development finance.\nDon’t worry if the data preparation code looks complex - in Week 3, you’ll learn how to transform data like this. For now, just run the code:\n\n# Helper function from Week 1\nto_billions &lt;- function(amount) {\n  amount / 10^9\n}\n\n# Create dataset for exploring project characteristics\ngcdf_project_features &lt;- get_gcdf3_dataset() |&gt;\n  filter(\n    recommended_for_aggregates == \"Yes\",\n    !is.na(source_quality_score), \n    !is.na(data_completeness_score)\n  ) |&gt;\n  mutate(\n    total_amount_bn = to_billions(amount_constant_usd_2021),\n    data_quality = source_quality_score + data_completeness_score\n  ) |&gt;\n  select(\n    total_amount_bn,\n    data_quality,\n    flow_class,\n    commitment_year,\n    total_source_count\n  )\n\ngcdf_project_features\n\n# A tibble: 17,957 × 5\n   total_amount_bn data_quality flow_class commitment_year total_source_count\n             &lt;dbl&gt;        &lt;dbl&gt; &lt;chr&gt;                &lt;int&gt;              &lt;int&gt;\n 1         0.00711            8 ODA-like              2021                  7\n 2         0.0126             8 ODA-like              2021                  9\n 3         0.0144             7 ODA-like              2021                  2\n 4         0.013              9 ODA-like              2021                 11\n 5         0.0075             9 ODA-like              2021                  5\n 6        NA                  6 ODA-like              2021                  1\n 7         0.0036             7 ODA-like              2021                 10\n 8        NA                  6 ODA-like              2021                  1\n 9        NA                  6 ODA-like              2021                  2\n10        NA                  6 ODA-like              2021                  1\n# ℹ 17,947 more rows\n\n\n\n\n\n\n\n\nTip\n\n\n\nCurious what this code does? Paste it into ChatGPT or Claude and ask them to explain it step by step. Understanding data preparation will be important later, but for now, let’s focus on visualization!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#building-your-first-visualization",
    "href": "week_2_pre_class.html#building-your-first-visualization",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.5 Building Your First Visualization",
    "text": "3.5 Building Your First Visualization\nLet’s start by exploring some interesting relationships in Chinese development finance data. Does project size relate to data quality? Do different types of flows show different patterns? We’ll build a visualization step by step to find out.\n\n3.5.1 Step 1: Basic Scatter Plot\n\nIn RStudio, click Addins → ggplot2 builder (Esquisse)\n\n\n\nWhen prompted, select gcdf_project_features as your dataset\n\n\n\nLet’s create a basic scatter plot to start exploring relationships:\n\n\nDrag data_quality to x-axis\nDrag total_amount_bn to y-axis\nClick “Point” as the chart type in the top left\n\n\n\nAt the bottom of the Esquisse window, click “Code” to see what ggplot2 code creates this plot\n\n\nCopy and run this code in your Quarto document:\n\nggplot(gcdf_project_features) +\n  aes(x = data_quality, y = total_amount_bn) +\n  geom_point(colour = \"#112446\") +\n  theme_minimal()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nYou’ve just created your first ggplot2 visualization! While simple, this already shows us something interesting: there seems to be a relationship between project size and data quality. Let’s make this visualization more informative by adding more dimensions to our data.\n\n\n\n\n\n\nAbout Those Warnings\n\n\n\nYou’ll see warnings like this:\nWarning: Removed 7286 rows containing missing values or values outside the scale range (`geom_point()`).\nDon’t worry! This just means some projects had missing data or values that couldn’t be plotted. This is normal when working with real-world data, especially financial data where we often have incomplete information.\nIf you want to hide these warnings in your documents, add this to the top of your code chunk:\n#| warning: false\nFor example:\n```{r}\n#| warning: false\nggplot(gcdf_project_features) +\n  aes(x = data_quality, y = total_amount_bn) +\n  geom_point()\n```\n\n\n\n\n3.5.2 Step 2: Add Color by Flow Class\n\n\n\n\n\n\nA Smoother Workflow\n\n\n\nNow that you understand how to use Esquisse, stay in the Esquisse window as we add features. Each time we enhance our plot: 1. Make the change in Esquisse 2. Look at the code it generates (using the Code button) 3. Compare it to our code examples & outputs below\nThis way you can experiment freely without having to restart Esquisse for each change. All the code is in this document for when you want to recreate these visualizations later.\n\n\nIn Esquisse, drag flow_class to the color box. When you do this, notice how the code changes:\n\n#|warning: false\nggplot(gcdf_project_features) +\n  aes(\n    x = data_quality,\n    y = total_amount_bn,\n    colour = flow_class\n  ) +\n  geom_point() +\n  scale_color_hue(direction = 1) +\n  theme_minimal()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nNotice how color = flow_class was added inside aes(). In ggplot2, aes() is where we map data variables to visual properties. Now our plot reveals not just the relationship between project size and data quality, but also shows how different types of flows (ODA-like, OOF-like, etc.) might have different patterns.\n\n\n3.5.3 Step 3: Size by Source Count\nLet’s add another dimension by varying point sizes. In Esquisse, drag total_source_count to the size box. The code will now look like this:\n\n#|warning: false\nggplot(gcdf_project_features) +\n  aes(\n    x = data_quality,\n    y = total_amount_bn,\n    colour = flow_class,\n    size = total_source_count\n  ) +\n  geom_point() +\n  scale_color_hue(direction = 1) +\n  theme_minimal()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nOur visualization now shows several relationships simultaneously: - Data quality (x-axis) - Project size (y-axis) - Number of sources (point size) - Flow class (color)\nLook at how larger dots tend to appear toward the right side of the plot. This suggests that projects with more sources tend to have better documentation. That makes sense.\n\n\n3.5.4 Step 4: Dealing with Overlapping Points\nYou might notice that many points overlap, especially at certain data quality scores. This happens because our data quality scores are whole numbers (0-10), so many projects have exactly the same score.\nIn Esquisse, look at the different geometry options on the left. Instead of the regular point plot, try the “jitter” option. This adds small random offsets to each point, making overlapping points visible. Here’s the code it generates:\n\n#|warning: false\nggplot(gcdf_project_features) +\n  aes(\n    x = data_quality,\n    y = total_amount_bn,\n    colour = flow_class,\n    size = total_source_count\n  ) +\n  geom_jitter() +\n  scale_color_hue(direction = 1) +\n  theme_minimal()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is jittering?\n\n\n\ngeom_jitter() adds a small amount of random noise to each point’s position. This helps us see overlapping points without changing the fundamental patterns in our data. It’s particularly useful when you have: - Whole number data (like our quality scores) - Many observations with the same values - Dense clusters of points\n\n\n\n\n3.5.5 Step 5: Adding Clear Labels\nNow let’s make our plot more informative for our audience. In Esquisse’s “Labels & Title” tab, add these labels: - Title: “Larger Chinese Development Projects Have Better Documentation” - X-axis: “Data Quality Score” - Y-axis: “Project Size (2021 USD, Billions)” - Color legend: “Flow Class” - Size legend: “Number of Sources”\nThe code will now include proper labels:\n\n#|warning: false\nggplot(gcdf_project_features) +\n  aes(\n    x = data_quality,\n    y = total_amount_bn,\n    colour = flow_class,\n    size = total_source_count\n  ) +\n  geom_jitter() +\n  scale_color_hue(direction = 1) +\n  labs(\n    x = \"Data Quality Score\",\n    y = \"Project Size (2021 USD, Billions)\",\n    title = \"Larger Chinese Development Projects Have Better Documentation\",\n    color = \"Flow Class\",\n    size = \"Number of Sources\"\n  ) +\n  theme_minimal()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n3.5.6 Step 6: Making Project Sizes More Visible\nOur plot still has a challenge: the huge range in project sizes (from millions to billions) makes it hard to see patterns. Small projects cluster at the bottom while large projects stretch the y-axis. This is a common issue when values span several orders of magnitude.\nWe can fix this using a logarithmic scale. In Esquisse’s “Axes” tab, look for the y-axis options and select “log10”. Here’s what the code looks like:\n\n#|warning: false\nggplot(gcdf_project_features) +\n  aes(\n    x = data_quality,\n    y = total_amount_bn,\n    colour = flow_class,\n    size = total_source_count\n  ) +\n  geom_jitter() +\n  scale_color_hue(direction = 1) +\n  scale_y_continuous(trans = \"log10\") +\n  labs(\n    x = \"Data Quality Score\",\n    y = \"Project Size (2021 USD, Billions, Log Scale)\",\n    title = \"Larger Chinese Development Projects Have Better Documentation\",\n    color = \"Flow Class\",\n    size = \"Number of Sources\"\n  ) +\n  theme_minimal()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhy Use Log Scales?\n\n\n\nLog scales are perfect for data that spans several orders of magnitude. They help us see patterns across both small and large values. In Chinese lending, where projects can range from $1 million to $10 billion, log scales are essential for clear visualization.\nNotice how the pattern is much clearer now: larger projects (higher on the y-axis) tend to have higher data quality scores (further right), regardless of flow class.\n\n\n\n\n3.5.7 Step 7: Changing the Look\nFinally, let’s try a different theme. In Esquisse’s Theme tab, switch from “minimal” to “gray”. This will give us a slightly different look:\n\n#|warning: false\nggplot(gcdf_project_features) +\n  aes(\n    x = data_quality,\n    y = total_amount_bn,\n    colour = flow_class,\n    size = total_source_count\n  ) +\n  geom_jitter() +\n  scale_color_hue(direction = 1) +\n  scale_y_continuous(trans = \"log10\") +\n  labs(\n    x = \"Data Quality Score\",\n    y = \"Project Size (2021 USD, Billions, Log Scale)\",\n    title = \"Larger Chinese Development Projects Have Better Documentation\",\n    color = \"Flow Class\",\n    size = \"Number of Sources\"\n  ) +\n  theme_gray()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#understanding-the-grammar-of-graphics",
    "href": "week_2_pre_class.html#understanding-the-grammar-of-graphics",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.6 Understanding the Grammar of Graphics",
    "text": "3.6 Understanding the Grammar of Graphics\nWhat we’ve just created illustrates a powerful idea in data visualization: the Grammar of Graphics. Just as English grammar gives us rules for combining words into meaningful sentences, the Grammar of Graphics gives us rules for combining visual elements into meaningful plots.\nLet’s break down our final visualization to understand each component:\n\n#|warning: false\nggplot(gcdf_project_features) +                    # 1. Start with data\n  aes(                                             # 2. Map data to visuals\n    x = data_quality,                              #    - x position\n    y = total_amount_bn,                           #    - y position\n    colour = flow_class,                           #    - color\n    size = total_source_count                      #    - size\n  ) +\n  geom_jitter() +                                  # 3. Choose how to display\n  scale_color_hue(direction = 1) +                 # 4. Adjust scales\n  scale_y_continuous(trans = \"log10\") +            #    - log scale for y\n  labs(                                            # 5. Add labels\n    x = \"Data Quality Score\",\n    y = \"Project Size (2021 USD, Billions)\",\n    title = \"Larger Chinese Development Projects Have Better Documentation\",\n    color = \"Flow Class\",\n    size = \"Number of Sources\"\n  ) +\n  theme_gray()                                     # 6. Choose overall look\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\nThink of each component as answering a specific question:\n\nData: What are we visualizing?\n\nggplot(gcdf_project_features)\nLike choosing your ingredients before cooking\n\nAesthetics: How should data map to visual properties?\n\naes(x = ..., y = ..., colour = ..., size = ...)\nLike assigning roles to your ingredients\n\nGeometries: What shapes should represent our data?\n\ngeom_jitter()\nLike choosing how to prepare your ingredients\n\nScales: How should values convert to visual properties?\n\nscale_y_continuous(trans = \"log10\")\nLike adjusting cooking temperature and time\n\nLabels: How do we explain what we’re showing?\n\nlabs(title = ..., x = ..., y = ...)\nLike writing the recipe name and instructions\n\nTheme: What should the overall look be?\n\ntheme_gray()\nLike choosing the serving dish and presentation\n\n\nUnderstanding this grammar is powerful because:\n\nYou can create any visualization by combining these elements\nChanges are as simple as modifying one component\nThe same principles work for any type of plot\n\n\n\n\n\n\n\nWhy Does ggplot2 Use + Instead of |&gt;?\n\n\n\nYou might wonder why ggplot2 uses + to combine elements instead of the pipe operator (|&gt;) we use elsewhere. This reflects R’s evolution as a living language:\n\nggplot2 was created in 2005, long before the pipe operator existed\nThe + operator was chosen because plots are built by adding layers\nBy the time the pipe became popular, too much code already used +\nChanging it would break thousands of existing scripts\n\nThis is a great example of how programming languages evolve while maintaining backwards compatibility.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#the-tip-of-the-iceberg",
    "href": "week_2_pre_class.html#the-tip-of-the-iceberg",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.7 The Tip of the Iceberg",
    "text": "3.7 The Tip of the Iceberg\nUnderstanding this grammar gives you access to ggplot2’s full power. Let’s look at some common visualization needs in Chinese development finance analysis. First, we’ll prepare some useful datasets:\n\n# Annual flow data\ngcdf_annual_flows &lt;- get_gcdf3_dataset() |&gt;\n  filter(recommended_for_aggregates == \"Yes\") |&gt;\n  group_by(commitment_year, flow_class) |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021, na.rm = TRUE) |&gt; \n      to_billions(),\n    .groups = \"drop\"\n  )\n\n# Add cumulative amounts\ngcdf_annual_flows &lt;- gcdf_annual_flows |&gt;\n  group_by(flow_class) |&gt;\n  mutate(\n    cumulative_amount_bn = cumsum(total_amount_bn)\n  ) |&gt;\n  ungroup()\n\n# Project-level data\ngcdf_projects &lt;- get_gcdf3_dataset() |&gt;\n  filter(recommended_for_aggregates == \"Yes\") |&gt;\n  mutate(\n    amount_constant_usd_2021_bn = to_billions(amount_constant_usd_2021)\n  )\n\nNow let’s see different ways to visualize this data using the grammar we’ve learned.\n\n3.7.1 Chart Types and Their Geometries\nThink of geometries (geom_*) as different ways to draw your data. Here are some you’ll commonly use at AidData:\nTime Series (showing lending trends):\n\n# Stacked bar chart of annual lending by flow class\nggplot(gcdf_annual_flows) + \n  aes(x = commitment_year, \n      y = total_amount_bn,\n      fill = flow_class) +\n  geom_col() +\n  labs(\n    title = \"Chinese Development Finance Over Time\",\n    x = \"Year\",\n    y = \"Amount (2021 USD, Billions)\",\n    fill = \"Flow Class\"\n  ) +\n  theme_gray()\n\n\n\n\n\n\n\n# Line plot showing cumulative amounts\nggplot(gcdf_annual_flows) +\n  aes(x = commitment_year, \n      y = cumulative_amount_bn,\n      color = flow_class) +\n  geom_line(linewidth = 1) +\n  labs(\n    title = \"Cumulative Chinese Development Finance\",\n    x = \"Year\",\n    y = \"Cumulative Amount (2021 USD, Billions)\",\n    color = \"Flow Class\"\n  ) +\n  theme_gray()\n\n\n\n\n\n\n\n\nDistributions (understanding project size patterns):\n\n# Histogram of project sizes\nggplot(gcdf_projects) +\n  aes(x = amount_constant_usd_2021_bn) +\n  geom_histogram(bins = 50) +\n  scale_x_log10() +\n  labs(\n    title = \"Distribution of Chinese Development Finance Project Sizes\",\n    x = \"Project Size (2021 USD, Billions, Log Scale)\",\n    y = \"Number of Projects\"\n  ) +\n  theme_gray()\n\nWarning: Removed 7286 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n# Box plots comparing flow types\nggplot(gcdf_projects) +\n  aes(x = flow_class, y = amount_constant_usd_2021_bn) +\n  geom_boxplot() +\n  scale_y_log10() +\n  labs(\n    title = \"Project Sizes by Flow Class\",\n    x = \"Flow Class\",\n    y = \"Project Size (2021 USD, Billions, Log Scale)\"\n  ) +\n  theme_gray() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nWarning: Removed 7286 rows containing non-finite outside the scale range\n(`stat_boxplot()`).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhich Chart When?\n\n\n\nFor time series: - Use geom_col() to show yearly totals - Use geom_line() to show trends or cumulative values\nFor distributions: - Use geom_histogram() to see overall patterns - Use geom_boxplot() to compare across categories - Remember to consider log scales for financial data!\n\n\n\n\n3.7.2 Making Adjustments with Scales\nScales control how your data translates to visual properties. For Chinese development finance data, here are some essential scale adjustments:\n\n# Better handling of wide-ranging financial values\nggplot(gcdf_projects) +\n  aes(x = commitment_year, y = amount_constant_usd_2021_bn) +\n  geom_point(alpha = 0.5) +\n  scale_y_continuous(\n    trans = \"log10\",\n    labels = scales::label_number(prefix = \"$\", suffix = \"B\")\n  ) +\n  labs(\n    title = \"Project Sizes Over Time\",\n    y = \"Amount (2021 USD, Log Scale)\"\n  ) +\n  theme_gray()\n\nWarning: Removed 7286 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n# Color-blind friendly palettes for flow types\nggplot(gcdf_annual_flows) + \n  aes(x = commitment_year, \n      y = total_amount_bn,\n      fill = flow_class) +\n  geom_col() +\n  scale_fill_brewer(palette = \"Set2\") +  # Color-blind friendly\n  labs(title = \"Using Color Brewer Palettes\") +\n  theme_gray()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCommon Scale Adjustments\n\n\n\n\nUse scale_y_log10() for financial amounts of multiple orders of magnitude\nUse scale_fill_brewer() or scale_color_brewer() for categorical variables\nUse scale_*_continuous(limits = ...) to focus on specific ranges\n\n\n\n\n\n3.7.3 Setting the Look with Themes\nThemes control the overall appearance. Different contexts need different looks:\nFirst, we’ll install {ggthemes}, a ggplot2 extension package, which provides extra themes.\n\n# First, install ggthemes\npak::pkg_install(\"ggthemes\")\n\n\n# Load ggthemes\nlibrary(ggthemes)\n\n# Create a base plot to try different themes\nbase_plot &lt;- ggplot(gcdf_annual_flows) + \n  aes(x = commitment_year, \n      y = total_amount_bn,\n      fill = flow_class) +\n  geom_col() +\n  labs(\n    title = \"Chinese Development Finance Over Time\",\n    subtitle = \"Annual Commitments by Flow Class\",\n    x = \"Year\",\n    y = \"Amount (2021 USD, Billions)\"\n  )\n\n# Like The Economist magazine\nbase_plot + \n  theme_economist() +\n  scale_fill_economist() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n# Like the Wall Street Journal\nbase_plot + \n  theme_wsj() +\n  scale_fill_wsj() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\n\n\n\n\n\n\n\nThese publication themes aren’t just for fun - they demonstrate how consistent visual styling helps build a publication’s brand. The Economist’s clean, professional look and the Wall Street Journal’s distinctive style are instantly recognizable to readers.\nThink about how this can apply to AidData.\n\n\n\n\n\n\nProfessional Publication Themes\n\n\n\nThe {ggthemes} package lets you mimic the style of major publications. While we might not use these for academic work, they’re: - Fun to play with - Great for presentations - Show how flexible ggplot2 can be - Demonstrate the power of consistent visual styling\n\n\n\n\n\n\n\n\nChoosing Themes\n\n\n\n\nUse theme_gray() (default) for exploration\nUse theme_minimal() for presentations\nUse theme_classic() or theme_bw() for publications\nRemember you can customize any theme with theme()",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#resources-for-learning-more",
    "href": "week_2_pre_class.html#resources-for-learning-more",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.8 Resources for Learning More",
    "text": "3.8 Resources for Learning More\nNow that you’ve seen the power of ggplot2, here are the key resources to help you keep learning:\n\n3.8.1 Essential References\n\nggplot2 cheatsheet\n\nTwo-page visual reference of ggplot2’s most useful features\nKeep this open while you work!\nPrint it and put it on your wall\n\nOfficial Documentation\n\nGetting Started with ggplot2: Clear introduction to core concepts\nComplete Function Reference: When you need details about specific functions\n\n\n\n\n3.8.2 Learning Resources\n\nData Visualization chapter in R for Data Science\n\nComprehensive introduction\nLots of examples\nFree online!\n\nVideo Tutorials\n\nBeautiful Charts with R & ggplot2 by Albert Rapp\nPerfect for learning by watching\nShows step-by-step process\n\n\n\n\n\n\n\n\nLearning Strategy\n\n\n\n\nStart simple - get something on the screen\nAdd complexity one layer at a time\nUse the cheatsheet to discover new features\nLook up details in the documentation when needed\nUse AI tools (like ChatGPT or Claude) to:\n\nExplain code you don’t understand\nSuggest improvements\nHelp debug issues",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_pre_class.html#next-steps",
    "href": "week_2_pre_class.html#next-steps",
    "title": "3  Week 2: Make Cool Charts, Right Away (Pre-Class)",
    "section": "3.9 Next Steps",
    "text": "3.9 Next Steps\nIn our class session, we’ll:\n\nReview any questions about the grammar of graphics\nPractice creating publication-ready visualizations\nWork with your own Chinese development finance questions\nLearn some advanced ggplot2 features\n\nRemember: The goal isn’t to memorize every option, but to understand the general approach to building visualizations layer by layer. With the grammar of graphics as your foundation, you can create any visualization you need!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html",
    "href": "week_2_in_class.html",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "",
    "text": "4.1 Learning Objectives\nBy the end of this session, you will be able to:",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html#learning-objectives",
    "href": "week_2_in_class.html#learning-objectives",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "",
    "text": "Create exploratory visualizations to understand patterns in Chinese development finance data\nLayer multiple aesthetic mappings to reveal complex relationships\nTransform exploratory visualizations into publication-ready graphics\nApply AidData’s visual style using the aiddataviz package\nUse AI tools effectively to assist with both exploration and polish",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html#todays-agenda-90-minutes",
    "href": "week_2_in_class.html#todays-agenda-90-minutes",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "4.2 Today’s Agenda (90 minutes)",
    "text": "4.2 Today’s Agenda (90 minutes)\n\nThe Two Purposes of Data Visualization (10 min)\n\nExploration vs. Communication\nThe power of visual thinking\nWhen to use each approach\n\nPart 1: Exploratory Data Visualization (35 min)\n\nIntroduction (5 min)\n\nThe value of quick, iterative visualization\nMaking lots of charts to find patterns\n\nDemo: Layering for Insight (15 min)\n\nCase study: Interest rates and commitment size\nAdding variables through aesthetic mappings\nUsing AI to suggest visualization approaches\n\nInteractive Exercise: Chart Detective (15 min)\n\nGroup exploration of Chinese development finance data\nCreating multiple visualizations\nFinding and sharing insights\n\n\nBreak & Discussion (5 min)\n\nShare key insights from exploration\nIdentify visualizations worth polishing\n\nPart 2: Creating Publication-Ready Visualizations (35 min)\n\nFrom Exploration to Publication (15 min)\n\nThe 6-step process for polishing visualizations\nUsing aiddataviz for consistent styling\nBest practices for professional charts\n\nInteractive Exercise: Polish & Present (20 min)\n\nTransform exploratory charts into publication quality\nApply AidData visual identity\nPeer review and feedback\n\n\nWrap-up & Resources (5 min)\n\nKey takeaways\nAdditional resources\nPreview of next week\n\n\n\n\n\n\n\n\nWhy This Matters for TUFF Analysis\n\n\n\nExploratory Visualization\n\nTUFF data is complex and often messy\nVisual exploration helps spot patterns that spreadsheets might miss\nQuick iteration helps generate hypotheses about Chinese lending behavior\nVisual thinking can reveal outliers that need deeper investigation\n\nProfessional Visualization\n\nTurn insights into compelling evidence for reports and blogs\nCreate consistent, branded graphics that build AidData’s reputation\nMove efficiently from analysis to publication\nTell clear stories about Chinese development finance\n\nThe skills you’re learning today directly support AidData’s mission of bringing transparency to Chinese overseas development finance.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html#setup",
    "href": "week_2_in_class.html#setup",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "4.3 Setup",
    "text": "4.3 Setup\nBefore we begin exploring data visualization, let’s get our environment ready. We’ll need to:\n\nInstall the experimental aiddataviz package\nInstall recommended fonts (optional)\nLoad required packages\n\n\n4.3.1 Installing aiddataviz\nFirst, install the aiddataviz package from GitHub:\n\npak::pak(\"Teal-Insights/aiddataviz\")\n\n\n\n\n\n\n\naiddataviz Package Status\n\n\n\nThe aiddataviz package is currently under active development. While it’s already useful for creating AidData-styled visualizations:\n\nExpect breaking changes in the coming weeks\nSome features may change or be refined\nYour feedback will help shape its development\nTreat it as experimental for now\n\nDocumentation is available at the aiddataviz website.\n\n\n\n\n4.3.2 Installing Fonts (Optional)\nThe package works best with specific fonts that match AidData’s visual identity. You can install these fonts with:\n\naiddataviz::install_aiddata_fonts()\n\n\n\n\n\n\n\nNote\n\n\n\nDon’t worry if the font installation doesn’t work - the package will automatically use appropriate backup fonts. We’re still refining this functionality!\n\n\n\n\n4.3.3 Loading Required Packages\nNow let’s load the packages we’ll need:\n\nlibrary(tidyverse)      # For data manipulation and visualization\nlibrary(chinadevfin3)   # For Chinese development finance data\nlibrary(aiddataviz)     # For AidData visualization tools\n\n\n\n4.3.4 Verifying Setup\nLet’s make sure everything is working by creating a simple visualization:\n\ngcdf_yearly_flows |&gt;\n  ggplot(\n    aes(x = commitment_year, \n        y = commitments_bn,\n        fill = flow_class)\n  ) +\n  geom_col() +\n  scale_fill_aiddata() +\n  theme_aiddata() +\n  labs(\n    title = \"Chinese Development Finance Flows\",\n    x = \"Year\",\n    y = \"Commitments (USD Billions)\"\n  )\n\n\n\n\n\n\n\n\nIf you see a chart with AidData’s colors and styling, you’re ready to go! If you run into any issues, don’t worry - we’ll troubleshoot together during class.\n\n\n\n\n\n\nGetting Help\n\n\n\nIf you encounter setup issues: 1. Check the aiddataviz documentation 2. Post in our course Slack channel",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html#part-1-exploratory-data-visualization",
    "href": "week_2_in_class.html#part-1-exploratory-data-visualization",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "4.4 Part 1: Exploratory Data Visualization",
    "text": "4.4 Part 1: Exploratory Data Visualization\nData visualization isn’t just about creating polished graphics for reports. One of its most powerful uses is as a tool for understanding your data and generating new hypotheses. As you explore data, you should:\n\nMake lots of charts quickly\nFocus on insight, not appearance\nLet each visualization suggest the next\nUse charts to generate questions\n\n\n4.4.1 A Case Study in Visual Exploration\nLet’s explore a specific question about Chinese overseas lending: Is there a relationship between the size of lending commitments and interest rates? And how does this relationship vary across different types of countries?\nThis is a perfect example of how we can use visualization to understand complex relationships in our data. We’ll build our visualization step by step, with each step adding new insights.\n\n4.4.1.1 Step 1: The Basic Relationship\nLet’s start with the simplest possible visualization of our question - a basic scatter plot:\n\ngcdf_country_commitments |&gt; \n  # Remove any rows with NA in key variables\n  filter(!is.na(weighted_interest_rate), \n         !is.na(total_commitments_bn)) |&gt;\n  ggplot(\n    aes(x = total_commitments_bn,\n        y = weighted_interest_rate)\n  ) + \n  geom_point()\n\n\n\n\n\n\n\n\nThis initial plot already shows there might be a relationship, but it’s hard to see the pattern clearly because of how financial data is distributed.\n\n\n4.4.1.2 Step 2: Making the Scale Intuitive\nFinancial data often spans several orders of magnitude - from millions to billions of dollars. Regular scales make it hard to see patterns across these different sizes. Let’s improve this with three changes:\n\nUse a log scale to spread out the data\nFormat the labels to be readable\nSet reasonable limits to use the space well\n\n\ngcdf_country_commitments |&gt; \n  filter(!is.na(weighted_interest_rate), \n         !is.na(total_commitments_bn)) |&gt;\n  ggplot(\n    # scale 1 billion --&gt; 1, we deal with scale below\n    aes(x = total_commitments_bn *1e9,\n        y = weighted_interest_rate)\n  ) + \n  geom_point() +\n  scale_x_log10(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale(),\n      prefix = \"$\"\n    ),\n    limits = c(15 * 1e6, 175 * 1e9)  # From roughly $15M to $175B\n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe {scales} Package\n\n\n\nThe {scales} package is an amazing resource for making your axes readable and professional. It can:\n\nFormat numbers (e.g., label_number())\nHandle currencies (e.g., label_dollar())\nShow percentages (e.g., label_percent())\nAbbreviate large numbers (e.g., scale_cut_short_scale())\n\nWhile scales offers many sophisticated options for publication-quality graphics, for exploratory work we just want readable labels. Using scale_cut_short_scale() to show “$1B” instead of “1e9” makes our chart more intuitive to read.\nTip: LLMs are great at reformatting scales.\n\n\n\n\n4.4.1.3 Step 3: Adding Country Labels\nThe scatter plot shows a pattern, but which countries are where? Let’s add labels:\n\ngcdf_country_commitments |&gt; \n  filter(!is.na(weighted_interest_rate), \n         !is.na(total_commitments_bn)) |&gt;\n  ggplot(\n    aes(x = total_commitments_bn * 1e9,\n        y = weighted_interest_rate)\n  ) + \n  geom_text(aes(label = iso3c), size = 3) +\n  scale_x_log10(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale(),\n      prefix = \"$\"\n    ),\n    limits = c(15 * 1e6, 175 * 1e9)  \n  )\n\n\n\n\n\n\n\n\nNow we can identify specific countries, and some interesting outliers appear. For example, why does Nicaragua have such a high interest rate relative to its commitment size?\n\n\n4.4.1.4 Step 4: Adding Regional Context\nAre there regional patterns? Let’s color-code by region:\n\ngcdf_country_commitments |&gt; \n  filter(!is.na(weighted_interest_rate), \n         !is.na(total_commitments_bn)) |&gt;\n  ggplot(\n    aes(x = total_commitments_bn * 1e9,\n        y = weighted_interest_rate)\n  ) + \n  geom_text(\n    aes(label = iso3c,\n        color = region_name),\n    size = 3\n  ) +\n   scale_x_log10(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale(),\n      prefix = \"$\"\n    ),\n    limits = c(15 * 1e6, 175 * 1e9) \n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAesthetic Mapping Levels\n\n\n\nIn ggplot2, you can map aesthetics (like color, size, etc.) at different levels:\n\nIn the main ggplot(aes()): applies to ALL layers\nIn individual geoms like geom_text(aes()): applies only to that layer\n\nHere, we put label and color in geom_text(aes()) because:\n\nWe want these aesthetics to only affect the country labels\nWhen we add trend lines later, we want them calculated on ALL data, not by region\nIf we put color = region_name in the main ggplot(aes()), our trend lines would be calculated separately for each region\n\n\n\n\n\n\n\n\n\nUsing AI for Exploration\n\n\n\nTry asking AI assistants questions like:\n\n“What patterns do you notice in this visualization?”\n“Can you help me fix my chart’s scales?”\n“How could I modify this code to explore [specific aspect]?”\n\n\n\n\n\n4.4.1.5 Step 4: Adding Statistical Context\nIs there an overall relationship? Let’s add a trend line:\n\ngcdf_country_commitments |&gt; \n  filter(!is.na(weighted_interest_rate), \n         !is.na(total_commitments_bn)) |&gt;\n  ggplot(\n    aes(x = total_commitments_bn * 1e9,\n        y = weighted_interest_rate)\n  ) + \n  geom_text(\n    aes(label = iso3c,\n        color = region_name),\n    size = 3\n  ) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  scale_x_log10(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale(),\n      prefix = \"$\"\n    ),\n    limits = c(15 * 1e6, 175 * 1e9)  \n  )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrend Lines with geom_smooth()\n\n\n\ngeom_smooth() adds a trend line to your plot to help visualize patterns. It can:\n\nUse different methods (lm for linear, loess for local, etc.)\nShow uncertainty with confidence intervals\nHelp identify relationships in noisy data\n\nFor example:\nLinear trend: geom_smooth(method = \"lm\")\nLocal smoothing (good for non-linear patterns): geom_smooth(method = \"loess\")\nLearn more in the geom_smooth() documentation.\n\n\n\n\n4.4.1.6 Step 5: Breaking Out by Income Level\nDoes this relationship vary by country income level? Let’s use faceting to find out:\n\ngcdf_country_commitments |&gt; \n  filter(!is.na(weighted_interest_rate), \n         !is.na(total_commitments_bn)) |&gt;\n  ggplot(\n    aes(x = total_commitments_bn * 1e9,\n        y = weighted_interest_rate)\n  ) + \n  geom_text(\n    aes(label = iso3c,\n        color = region_name),\n    size = 2\n  ) +\n  scale_x_log10(\n    labels = scales::label_number(\n      scale_cut = scales::cut_short_scale(),\n      prefix = \"$\"\n    ),\n    limits = c(15 * 1e6, 175 * 1e9)\n  ) +\n  geom_smooth(method = \"lm\", se = TRUE) +\n  facet_wrap(~income_level_name)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nFaceting for Multiple Views facet_wrap() creates small multiples of your plot, split by a variable. It’s great for:\n\nComparing patterns across groups\nSpotting differences in relationships\nDealing with overlapping data\n\nThe ~ in facet_wrap(~variable) is a formula that tells R which variable to use for splitting. Key options:\nscales = \"free\": Let axes vary between facets\nncol or nrow: Control layout\nLearn more in the facet_wrap() documentation\n\n\n\n\n\n4.4.2 What Have We Learned?\nThis exploratory process has revealed several interesting patterns:\n\nThere appears to be a positive relationship between commitment size and interest rates\nThis relationship varies by income level\nThere are some notable outliers worth investigating\nRegional patterns exist within income groups\n\nNot all exploratory analysis yields profound implications. It’s valuable nevertheless.\n\n\n4.4.3 What Questions Does This Raise?\nGood exploratory visualization often raises more questions than it answers:\n\nWhy does Niger have such a high interest rate relative to its peers?\nWhat explains the different slopes across income groups?\nAre these relationships stable over time?\nWhat other factors might explain these patterns?\n\n\n\n4.4.4 Next Steps\nThis exploration suggests several promising directions:\n\nFurther Research: Look into specific outlier cases\nAdditional Visualization: Explore how these patterns change over time\nStatistical Analysis: Consider formal modeling of these relationships\nDomain Expert Input: Discuss findings with colleagues who know specific countries\n\n\n\n\n\n\n\nFrom Exploration to Communication\n\n\n\nIf you find patterns worth sharing:\n\nFor colleagues: Add clear titles, labels, and notes\nFor reports: Transform into publication-quality visualizations\nFor presentations: Simplify to emphasize key points\n\n\n\n\n\n4.4.5 Practice Exercise: Understanding Distributions\nLet’s explore the distributions of key variables in our Chinese development finance data. We’ll use histograms and box plots to understand both overall patterns and how they vary across groups.\n\n\n\n\n\n\nExploring Distributions\n\n\n\nWhen examining a variable’s distribution, it’s helpful to:\n\nLook at the overall shape first (histogram)\nThen compare across groups (box plots)\nConsider whether you need to transform scales (often for financial data)\n\n\n\nExplore these two key variables:\n\nWeighted Interest Rates\n\n\nStart with overall distribution\nCompare across regions\nCompare across income groups\nConsider: What patterns do you see? Any surprises?\n\n\nTotal Commitments\n\n\nLook at the overall distribution\nTry with and without log scale\nLook at regional patterns\nExamine patterns by income group\nThink about: Where is China lending the most? Least?\n\n\n\n\n\n\n\nUseful geoms for Distribution Analysis\n\n\n\n\ngeom_histogram(): Overall shape of distribution\ngeom_boxplot(): Compare distributions across groups\ngeom_density(): Smooth version of histogram\ngeom_violin(): Combination of density and box plot\n\nTry different ones to see which reveals patterns best!\n\n\nRemember:\n\nMake lots of charts\nTry different visualization approaches\nNote interesting patterns\nGenerate questions for further research\n\nShare what you discover with your colleagues - sometimes fresh eyes see new patterns!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html#part-2-from-exploration-to-publication-ready-graphics",
    "href": "week_2_in_class.html#part-2-from-exploration-to-publication-ready-graphics",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "4.5 Part 2: From Exploration to Publication-Ready Graphics",
    "text": "4.5 Part 2: From Exploration to Publication-Ready Graphics\n\n4.5.1 Creating Publication-Ready Graphics with aiddataviz\nIn the first part of this class, we explored how to use visualization to understand patterns in our data. Now we’ll learn how to transform those exploratory visualizations into polished, professional graphics suitable for reports and presentations.\n\n\n\n\n\n\nHelp Shape aiddataviz\n\n\n\nThe aiddataviz package is brand new and actively evolving. While it’s already useful for creating AidData-styled visualizations:\n\nExpect the package to change significantly in coming weeks\nSome features may be added or refined\nDocumentation will be expanded\nInstallation processes will be streamlined\n\nYour Input Matters!\nWe’re actively seeking feedback from AidData staff & communications team to make this package truly useful for your work. We’d love your input on:\n\nColor palettes that work well for your analysis\nFont choices that match AidData’s brand\nOutput formats you commonly need\nCommon visualization types you create\nFeatures that would save you time\n\nThis is your chance to help build a tool that makes your work easier!\n\n\n\n\n4.5.2 Our Target: Professional Publication Quality\nLet’s work through transforming an exploratory visualization into something publication-ready. We’ll recreate this visualization from AidData’s Belt and Road Reboot Report:\n\nThis visualization effectively communicates several key pieces of information:\n\nTotal lending volumes over time\nComposition of lending by flow class\nKey periods in the Belt and Road Initiative\nClear source attribution and professional styling\n\n\n\n4.5.3 Building Our Publication-Ready Visualization\nLet’s transform our exploratory visualization into a polished, publication-ready graphic step by step. Think of it like building with Legos - each piece adds something specific and manageable.\n\n4.5.3.1 Step 1: Start with Basic Structure\nFirst, let’s create our basic stacked bar chart:\n\ngcdf_yearly_flows |&gt; \n  ggplot(\n    aes(\n      x = commitment_year,\n      y = commitments_bn,\n      fill = flow_class\n    ) \n  ) + \n  geom_col() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis basic structure already shows our key information - lending volumes over time by flow class. Now we’ll enhance it step by step.\n\n\n\n\n4.5.3.2 Step 2: Improve Visual Organization\nWe’ll reorder the flow classes to create a more intuitive stacking order:\n\np &lt;- gcdf_yearly_flows |&gt; \n  ggplot(\n    aes(\n      x = commitment_year,\n      y = commitments_bn,\n      fill = fct_reorder2(\n        .f = flow_class,\n        .x = commitment_year,\n        .y = commitments_bn,\n        .desc = FALSE\n    )\n  ) \n  )+ \n  geom_col() +\n  labs(fill = \"\")\np\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nFactor Reordering: Static vs Time Series Data The forcats package gives us two key tools for reordering factors: fct_reorder(): Best for static data (like sorted bar charts)\nOrders categories by a single value Perfect when you want to rank things from highest to lowest\nfct_reorder2(): Designed specifically for time series data\nTakes both time and value into account Creates stable ordering over time Particularly useful for stacked charts like ours\nThink: “Static = fct_reorder(), Time Series = fct_reorder2()”\n\n\n\n\n4.5.3.3 Step 3: Apply AidData’s Visual Style\nNow we’ll transform the look using AidData’s color palette and theme:\n\n#Using predefined colors from aiddataviz\naiddata_custom_colors &lt;- c(\n  \"ODA-like\" = unname(aiddata_colors$wren_twilight),\n  \"OOF-like\" = unname(aiddata_colors$spirit_gold),\n  \"Vague (Official Finance)\" = unname(aiddata_colors$silver)\n)\n\np2 &lt;- p +\n  # allows you to define your own colors\n  scale_fill_manual(values = aiddata_custom_colors) +\n  theme_aiddata() +\n  theme(\n    panel.grid.major.x = element_blank()  # Remove vertical gridlines\n  )\np2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAidData’s Color System\n\n\n\nThe colors we’re using come from William & Mary’s brand guidelines and have been chosen to:\n\nEnsure readability\nMaintain institutional identity\nWork well together in various combinations\n\n\n\n\n\n4.5.3.4 Step 4: Add Direct Labels\nLet’s replace the legend with direct labels, making it easier for readers to identify categories:\n\np3 &lt;- p2 +\n  annotate(\n    \"text\", \n    x = 2022, \n    y = c(82, 68, 40), \n    label = c(\"Vague\", \"ODA\", \"OOF\"), \n    # Match colors to labels explicitly\n    color = c(\n      unname(aiddata_colors$silver),          # For \"Vague\"\n      unname(aiddata_colors$wren_twilight),   # For \"ODA\"\n      unname(aiddata_colors$spirit_gold)      # For \"OOF\"\n    ),\n    size = 4, \n    hjust = 0\n  ) +\n  # add space for the labels\n  xlim(2000, 2023) +\n  # get rid of the old clunky legend\n  theme(legend.position = \"none\")\np3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nDirect labels eliminate the need for readers to look back and forth between the visualization and a legend, making the chart easier to understand quickly.\n\n\n\n\n4.5.3.5 Step 5: Add Context with Annotations\nNow we’ll add the BRI period markers to provide important context:\n\np4 &lt;- p3 +\n  # Add vertical lines for BRI periods\n  geom_vline(\n    xintercept = c(2013.5, 2017.5),\n    linetype = \"dashed\",\n    color = aiddata_colors$gray50,\n    alpha = 0.5\n  ) +\n  # Add BRI period annotations\n  annotate(\n    \"text\",\n    x = 2015.5,\n    y = 165,\n    label = \"Early BRI\\n(2014-2017)\",\n    size = 3.5,\n    color = aiddata_colors$gray50\n  ) +\n  annotate(\n    \"text\",\n    x = 2019.5,\n    y = 165,\n    label = \"Late BRI\\n(2018-2021)\",\n    size = 3.5,\n    color = aiddata_colors$gray50\n  )\np4\n\n\n\n\n\n\n\n\n\n\n4.5.3.6 Step 6: Polish with Professional Labeling\nFinally, we’ll add clear titles, format axes, and include proper source attribution:\n\np5 &lt;- p4 +\n  labs(\n    title = \"Official financial flows from China to the developing world,&lt;br&gt;2000-2021\",\n    subtitle = \"Constant 2021 USD Billions\",\n    x = NULL,\n    y = NULL,\n    caption = \"Source: AidData's Global Chinese Development Finance Dataset, Version 3.0\"\n  ) +\n  scale_y_continuous(\n    labels = scales::label_currency(suffix = \" B\"),\n    limits = c(0,170)\n  )\np5\n\n\n\n\n\n\n\n\nLet’s compare it to the original:\n\nLooks pretty close! That’s something you can easily learn to do well.\nIf we wanted to, we could take a few more steps:\n\ndraw lines from our labels to the columns\nmake the axis titles lighter to draw attention away from them\n\nOnce you get to that level, it’s worth talking with your communications team. They are professionals.\n\n\n\n4.5.4 Key Elements of Professional Visualizations\nOur final visualization incorporates several key elements that make it publication-ready:\n\nClear Visual Hierarchy\n\nOrdered stacking of categories\nDirect labels instead of legend\nRemoval of unnecessary grid lines\n\nConsistent Branding\n\nAidData color palette\nProfessional typography\nClean, minimal theme\n\nContextual Information\n\nClear title and subtitle\nImportant period markers\nProper source attribution\n\nReadable Formatting\n\nWell-formatted axis labels\nAppropriate scale limits\nBalanced use of space\n\n\n\n\n\n\n\n\nCreating Your Own Publication Graphics\n\n\n\nCreate a checklist for your visualizations:\n\nIs the main message immediately clear?\nAre all elements properly labeled?\nIs the styling consistent with your organization’s brand?\nHave you removed unnecessary visual elements?\nIs the source clearly attributed?",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html#resources-for-data-visualization",
    "href": "week_2_in_class.html#resources-for-data-visualization",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "4.6 Resources for Data Visualization",
    "text": "4.6 Resources for Data Visualization\n\n4.6.1 Essential References\n\nggplot2 Documentation\n\nComprehensive function reference\nClear examples for each feature\nBest place to look up specific details\n\nR for Data Science (2e)\n\nSection 2 focuses entirely on visualization\nWritten by ggplot2’s creator, Hadley Wickham\nPerfect balance of theory and practice\nFree online!\n\n\n\n\n4.6.2 Finding Inspiration & Solutions\n\nggplot2 Extensions Gallery\n\nBrowse specialized visualization packages\nFind new ways to present your data\nAll compatible with ggplot2\n\nR Graph Gallery\n\nExamples of many chart types\nStep-by-step instructions\nCode you can adapt\n\n\n\n\n\n\n\n\nQuick Tip\n\n\n\nWhen you need to create a new type of visualization:\n\nCheck the R Graph Gallery for examples\nLook for relevant ggplot2 extensions\nAsk AI tools to help adapt example code\n\n\n\n\n\n4.6.3 Advanced Learning\n\nStorytelling with Data\n\nBeyond technical skills\nFocus on communication\nKey concepts:\n\nUnderstanding context and audience\nChoosing the right visualization\nEliminating chart clutter\nUsing design principles\nBuilding effective narratives\n\n\nGraphic Design with ggplot2\n\n💫 Highly Recommended!\nComprehensive workshop materials\nFree online access\nTopics include:\n\nAdvanced ggplot2 techniques\nColor theory and typography\nLayout and composition\nCreating publication-quality graphics\n\n\n\n\n\n\n\n\n\nLearning Path Suggestion\n\n\n\n\nStart with R4DS for foundations\nUse the galleries for inspiration\nReference ggplot2 docs for details\nMove to advanced resources when ready\n\n\n\n\n\n4.6.4 Practice Exercise\nTake one of the exploratory visualizations you created today and:\n\nFind a similar example in the R Graph Gallery\nIdentify ways to enhance it\nUse the ggplot2 documentation to implement improvements\nShare your before/after with colleagues\n\nRemember: Great visualization is an iterative process. Start simple, then enhance step by step.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_2_in_class.html#wrapping-up-the-power-of-data-visualization",
    "href": "week_2_in_class.html#wrapping-up-the-power-of-data-visualization",
    "title": "4  Week 2: Make Cool Charts, Right Away (In-Class)",
    "section": "4.7 Wrapping Up: The Power of Data Visualization",
    "text": "4.7 Wrapping Up: The Power of Data Visualization\n\n4.7.1 Today’s Achievements\nLet’s look back at what we’ve accomplished in just 90 minutes:\n\nMastered Two Types of Visualization\n\n\nCreated exploratory visualizations to understand data\nTransformed rough charts into publication-ready graphics\nLearned when to use each approach\n\n\nUsed Visualization for Discovery\n\n\nLayered multiple variables into single charts\nDiscovered patterns in Chinese development finance\nGenerated new questions for research\nLearned to use aesthetic mappings effectively\n\n\nCreated Professional Graphics\n\n\nApplied AidData’s visual identity\nBuilt complex visualizations step by step\nUsed the aiddataviz package for consistent styling\nAdded professional touches like annotations and labels\n\nMost importantly, you now have a toolkit for both exploring data and communicating your findings effectively. While mastering data visualization takes time and practice, you have working examples you can build upon and adapt for your own analysis needs.\n\n\n4.7.2 Checking Our Learning Objectives\nLet’s review what we set out to achieve:\n✅ Create exploratory visualizations\n\nYou’ve learned to build layered visualizations\nYou know how to map multiple variables to aesthetics\nYou can use faceting to compare across groups\n\n✅ Layer aesthetic mappings\n\nYou understand how different mappings reveal patterns\nYou can combine multiple variables in one visualization\nYou know how to choose effective aesthetic mappings\n\n✅ Transform exploratory charts into publication graphics\n\nYou can follow the 6-step process for polishing charts\nYou understand the elements of professional visualization\nYou can use aiddataviz for consistent styling\n\n✅ Apply AidData’s visual identity\n\nYou know how to use AidData’s color palettes\nYou can apply consistent styling with theme_aiddata()\nYou understand the importance of visual consistency\n\n✅ Use AI tools effectively\n\nYou’ve seen how AI can help with visualization code\nYou know what questions to ask AI assistants\nYou understand how to verify AI suggestions\n\n\n\n4.7.3 Resources for Continued Learning\nRemember, you have several resources available:\n\nOur course textbook and examples\nThe comprehensive resources we just covered\nThe aiddataviz package (though remember it’s still evolving!)\nAI tools to help with coding and troubleshooting\n\n\n\n4.7.4 Next Steps\n\nPractice with Your Own Data\n\n\nTry creating exploratory visualizations of your current projects\nApply the 6-step process to polish important charts\nUse AI tools to help when you get stuck\n\n\nPrepare for Next Week\n\n\nWe’ll dive into data transformation\nThink about what patterns you’d like to investigate\nConsider how visualization and transformation work together\n\n\nGet Help When Needed\n\n\nUse AI tools for code help\nReference the resources we covered\nAsk questions in our course forum\nShare challenges and solutions with colleagues\n\nRemember: Learning data visualization is a journey. Focus on understanding the fundamentals and building your skills step by step. You don’t need to memorize everything - knowing where to find help is often more important than memorizing syntax.\nSee you next week!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Week 2: Make Cool Charts, Right Away (In-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html",
    "href": "week_3_pre_class.html",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "",
    "text": "5.1 Overview\nThis pre-class preparation should take about 45-60 minutes to complete.\nNow that you can create visualizations and automated reports, it’s time to learn how to transform your data to find meaningful insights. This week focuses on data transformation - the process of taking raw data and reshaping it to answer specific questions. We’ll use the tidyverse’s powerful dplyr package, which makes complex data operations surprisingly intuitive.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#overview",
    "href": "week_3_pre_class.html#overview",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "",
    "text": "5.1.1 Video Lecture\nWatch this video lecture before our interactive session:",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#learning-objectives",
    "href": "week_3_pre_class.html#learning-objectives",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.2 Learning Objectives",
    "text": "5.2 Learning Objectives\nBy completing this pre-class work, you will:\n\nUnderstand the core data transformation verbs in dplyr\nLearn to chain operations together using the pipe operator |&gt;\nBegin thinking about data transformation patterns\nPractice with real Chinese development finance data\nUse AI tools to assist with data transformation tasks",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#setup",
    "href": "week_3_pre_class.html#setup",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.3 Setup",
    "text": "5.3 Setup\nLet’s get our workspace ready. First, create a new Quarto document for your notes:\n# Create a new Quarto document\n# File → New File → Quarto Document\n# Save as \"week_3_transformation_preclass.qmd\" in your week_3/R folder\nLoad the packages we’ll need:\n\nlibrary(tidyverse)    # For data transformation tools\nlibrary(chinadevfin3) # For Chinese development finance data",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#a-mini-dataset-for-learning",
    "href": "week_3_pre_class.html#a-mini-dataset-for-learning",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.4 A Mini Dataset for Learning",
    "text": "5.4 A Mini Dataset for Learning\nBefore diving into data transformation, let’s create a small dataset we’ll use for learning. This contains the two largest loans for five countries:\n\nmini_gcdf &lt;- get_gcdf3_dataset() |&gt; \n    filter(\n        recommended_for_aggregates == \"Yes\",\n        flow_type == \"Loan\",\n        recipient %in% c(\n            \"Angola\",\n            \"Zambia\",\n            \"Venezuela\",\n            \"Indonesia\",\n            \"Pakistan\"\n        )\n    ) |&gt; \n    group_by(recipient) |&gt; \n    slice_max(\n        order_by = amount_constant_usd_2021,\n        n = 2\n    ) |&gt; \n    select(\n        recipient,\n        recipient_region,\n        sector_name,\n        commitment_year,\n        amount_constant_usd_2021 \n    ) |&gt; \n    ungroup()\n\n# Also create a dataset for year-over-year analysis\nangola_annual_flows &lt;- get_gcdf3_dataset() |&gt;\n    filter(\n        recommended_for_aggregates == \"Yes\",\n        flow_type == \"Loan\",\n        recipient == \"Angola\"\n    ) |&gt;\n    group_by(commitment_year) |&gt;\n    summarize(\n        total_amount = sum(amount_constant_usd_2021, na.rm = TRUE),\n        .groups = \"drop\"\n    )\n\n# Look at our mini dataset\nmini_gcdf\n\n# A tibble: 10 × 5\n   recipient recipient_region sector_name commitment_year amount_constant_usd_…¹\n   &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                 &lt;int&gt;                  &lt;dbl&gt;\n 1 Angola    Africa           ENERGY                 2016            8147551108.\n 2 Angola    Africa           OTHER SOCI…            2010            3481817339.\n 3 Indonesia Asia             INDUSTRY, …            2009            2853819092.\n 4 Indonesia Asia             TRANSPORT …            2017            2743140983.\n 5 Pakistan  Asia             BANKING AN…            2020            4855813054.\n 6 Pakistan  Asia             BANKING AN…            2021            4651162791.\n 7 Venezuela America          OTHER MULT…            2010           14402361186.\n 8 Venezuela America          OTHER MULT…            2010           13927269358.\n 9 Zambia    Africa           ENERGY                 2017             881870586.\n10 Zambia    Africa           ENERGY                 2017             881870586.\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n\n\nDon’t worry if the code that created this dataset looks complex - by the end of this pre-class material, you’ll understand every line! For now, just notice that:\n\nWe have 10 rows (2 loans each from 5 countries)\nCountries are from 3 different regions (Africa, Asia, America)\nEach loan has a sector, year, and amount\nThe amounts are in constant 2021 USD\n\nThis small dataset will help us learn the fundamentals before working with the full GCDF database.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#the-five-core-verbs-of-data-transformation",
    "href": "week_3_pre_class.html#the-five-core-verbs-of-data-transformation",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.5 The Five Core verbs of Data Transformation",
    "text": "5.5 The Five Core verbs of Data Transformation\nThink of data transformation as having five fundamental operations, just like basic arithmetic has addition, subtraction, multiplication, and division. In dplyr, these operations are:\n\nfilter(): Pick rows based on their values\narrange(): Change the order of rows\nselect(): Pick columns by their names\nmutate(): Create new columns from existing ones\nsummarize(): Collapse multiple rows into a single summary\n\nLet’s explore each one using examples from Chinese development finance data.\n\n5.5.1 Verb 1. filter(): Subsetting Your Data\nfilter() helps you focus on specific parts of your data. Think of it like a sieve that keeps only the rows you want:\n\n# Using mini dataset: African loans over $1 billion\nmini_gcdf |&gt;\n  filter(\n    recipient_region == \"Africa\",\n    amount_constant_usd_2021 &gt;= 1 * 1e9\n  )\n\n# A tibble: 2 × 5\n  recipient recipient_region sector_name  commitment_year amount_constant_usd_…¹\n  &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                  &lt;int&gt;                  &lt;dbl&gt;\n1 Angola    Africa           ENERGY                  2016            8147551108.\n2 Angola    Africa           OTHER SOCIA…            2010            3481817339.\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n\n# Real world example: Large ODA-like projects\nget_gcdf3_dataset() |&gt;\n  filter(\n    flow_class == \"ODA-like\",\n    amount_constant_usd_2021 &gt;= 100 * 1e6,\n    recommended_for_aggregates == \"Yes\"\n  )\n\n# A tibble: 292 × 129\n   country_name     iso3c country_or_regional aid_data_record_id\n   &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;                            &lt;int&gt;\n 1 Sri Lanka        LKA   country                          89483\n 2 Tajikistan       TJK   country                          92674\n 3 Uzbekistan       UZB   country                          92623\n 4 Cambodia         KHM   country                          94984\n 5 North Korea      PRK   country                          93442\n 6 North Korea      PRK   country                          93443\n 7 North Korea      PRK   country                          95607\n 8 Congo - Kinshasa COD   country                          92575\n 9 Ghana            GHA   country                          92600\n10 Kazakhstan       KAZ   country                          92613\n# ℹ 282 more rows\n# ℹ 125 more variables: recommended_for_aggregates &lt;chr&gt;,\n#   aid_data_parent_id &lt;chr&gt;, umbrella &lt;chr&gt;, financier_country &lt;chr&gt;,\n#   recipient &lt;chr&gt;, recipient_iso_3 &lt;chr&gt;, recipient_region &lt;chr&gt;,\n#   commitment_year &lt;int&gt;, implementation_start_year &lt;int&gt;,\n#   completion_year &lt;int&gt;, title &lt;chr&gt;, description &lt;chr&gt;,\n#   staff_comments &lt;chr&gt;, status &lt;chr&gt;, intent &lt;chr&gt;, flow_type &lt;chr&gt;, …\n\n\nCommon filtering operations you’ll use:\n\n# Projects from recent years\nget_gcdf3_dataset() |&gt;\n  filter(commitment_year &gt;= 2018)\n\n# A tibble: 6,528 × 129\n   country_name iso3c country_or_regional aid_data_record_id\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;                            &lt;int&gt;\n 1 Afghanistan  AFG   country                          94556\n 2 Afghanistan  AFG   country                          94564\n 3 Afghanistan  AFG   country                          94565\n 4 Afghanistan  AFG   country                          94567\n 5 Afghanistan  AFG   country                          94568\n 6 Afghanistan  AFG   country                          94613\n 7 Afghanistan  AFG   country                          94619\n 8 Afghanistan  AFG   country                          95312\n 9 Afghanistan  AFG   country                          95322\n10 Afghanistan  AFG   country                          95323\n# ℹ 6,518 more rows\n# ℹ 125 more variables: recommended_for_aggregates &lt;chr&gt;,\n#   aid_data_parent_id &lt;chr&gt;, umbrella &lt;chr&gt;, financier_country &lt;chr&gt;,\n#   recipient &lt;chr&gt;, recipient_iso_3 &lt;chr&gt;, recipient_region &lt;chr&gt;,\n#   commitment_year &lt;int&gt;, implementation_start_year &lt;int&gt;,\n#   completion_year &lt;int&gt;, title &lt;chr&gt;, description &lt;chr&gt;,\n#   staff_comments &lt;chr&gt;, status &lt;chr&gt;, intent &lt;chr&gt;, flow_type &lt;chr&gt;, …\n\n# Projects in specific countries\nget_gcdf3_dataset() |&gt;\n  filter(recipient %in% c(\"Angola\", \"Ethiopia\", \"Kenya\"))\n\n# A tibble: 963 × 129\n   country_name iso3c country_or_regional aid_data_record_id\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;                            &lt;int&gt;\n 1 Angola       AGO   country                          92519\n 2 Angola       AGO   country                          93104\n 3 Angola       AGO   country                          93281\n 4 Angola       AGO   country                          93286\n 5 Angola       AGO   country                          95331\n 6 Ethiopia     ETH   country                          91947\n 7 Ethiopia     ETH   country                          92357\n 8 Ethiopia     ETH   country                          95864\n 9 Ethiopia     ETH   country                          95866\n10 Ethiopia     ETH   country                          95869\n# ℹ 953 more rows\n# ℹ 125 more variables: recommended_for_aggregates &lt;chr&gt;,\n#   aid_data_parent_id &lt;chr&gt;, umbrella &lt;chr&gt;, financier_country &lt;chr&gt;,\n#   recipient &lt;chr&gt;, recipient_iso_3 &lt;chr&gt;, recipient_region &lt;chr&gt;,\n#   commitment_year &lt;int&gt;, implementation_start_year &lt;int&gt;,\n#   completion_year &lt;int&gt;, title &lt;chr&gt;, description &lt;chr&gt;,\n#   staff_comments &lt;chr&gt;, status &lt;chr&gt;, intent &lt;chr&gt;, flow_type &lt;chr&gt;, …\n\n# Projects where we don't have an unknown (NA) commitment value\nget_gcdf3_dataset() |&gt;\n  filter(\n    !is.na(amount_constant_usd_2021),\n    recommended_for_aggregates == \"Yes\"\n  )\n\n# A tibble: 10,671 × 129\n   country_name     iso3c country_or_regional aid_data_record_id\n   &lt;chr&gt;            &lt;chr&gt; &lt;chr&gt;                            &lt;int&gt;\n 1 Afghanistan      AFG   country                          94556\n 2 Afghanistan      AFG   country                          94564\n 3 Afghanistan      AFG   country                          94565\n 4 Afghanistan      AFG   country                          94567\n 5 Afghanistan      AFG   country                          94568\n 6 Afghanistan      AFG   country                          94619\n 7 Afghanistan      AFG   country                          98007\n 8 Afghanistan      AFG   country                          98008\n 9 Africa, regional &lt;NA&gt;  regional                         92947\n10 Algeria          DZA   country                          94808\n# ℹ 10,661 more rows\n# ℹ 125 more variables: recommended_for_aggregates &lt;chr&gt;,\n#   aid_data_parent_id &lt;chr&gt;, umbrella &lt;chr&gt;, financier_country &lt;chr&gt;,\n#   recipient &lt;chr&gt;, recipient_iso_3 &lt;chr&gt;, recipient_region &lt;chr&gt;,\n#   commitment_year &lt;int&gt;, implementation_start_year &lt;int&gt;,\n#   completion_year &lt;int&gt;, title &lt;chr&gt;, description &lt;chr&gt;,\n#   staff_comments &lt;chr&gt;, status &lt;chr&gt;, intent &lt;chr&gt;, flow_type &lt;chr&gt;, …\n\n\n\n\n\n\n\n\nLogical Operators in filter()\n\n\n\n\n==: Exactly equals\n!=: Does not equal\n&gt;, &gt;=: Greater than, Greater than or equal to\n&lt;, &lt;=: Less than, Less than or equal to\n%in%: Is in a set of values\n!is.na(): Is not missing\n&: And (multiple conditions)\n|: Or (either condition)\n\n\n\n\n\n5.5.2 Verb 2. arrange(): Ordering Your Data\narrange() lets you sort your data. By default, it sorts in ascending order (smallest to largest):\n\n# Using mini dataset: Sort by size (largest first)\nmini_gcdf |&gt;\n  arrange(desc(amount_constant_usd_2021))\n\n# A tibble: 10 × 5\n   recipient recipient_region sector_name commitment_year amount_constant_usd_…¹\n   &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                 &lt;int&gt;                  &lt;dbl&gt;\n 1 Venezuela America          OTHER MULT…            2010           14402361186.\n 2 Venezuela America          OTHER MULT…            2010           13927269358.\n 3 Angola    Africa           ENERGY                 2016            8147551108.\n 4 Pakistan  Asia             BANKING AN…            2020            4855813054.\n 5 Pakistan  Asia             BANKING AN…            2021            4651162791.\n 6 Angola    Africa           OTHER SOCI…            2010            3481817339.\n 7 Indonesia Asia             INDUSTRY, …            2009            2853819092.\n 8 Indonesia Asia             TRANSPORT …            2017            2743140983.\n 9 Zambia    Africa           ENERGY                 2017             881870586.\n10 Zambia    Africa           ENERGY                 2017             881870586.\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n\n# Real world example: Sort projects by multiple columns\nget_gcdf3_dataset() |&gt;\n  filter(recommended_for_aggregates == \"Yes\") |&gt;\n  arrange(\n    recipient,  # First by country A-Z\n    desc(commitment_year)  # Then by most recent year\n  )\n\n# A tibble: 17,957 × 129\n   country_name iso3c country_or_regional aid_data_record_id\n   &lt;chr&gt;        &lt;chr&gt; &lt;chr&gt;                            &lt;int&gt;\n 1 Afghanistan  AFG   country                          94556\n 2 Afghanistan  AFG   country                          94564\n 3 Afghanistan  AFG   country                          94565\n 4 Afghanistan  AFG   country                          94567\n 5 Afghanistan  AFG   country                          94568\n 6 Afghanistan  AFG   country                          94613\n 7 Afghanistan  AFG   country                          94619\n 8 Afghanistan  AFG   country                          95322\n 9 Afghanistan  AFG   country                          95323\n10 Afghanistan  AFG   country                          95324\n# ℹ 17,947 more rows\n# ℹ 125 more variables: recommended_for_aggregates &lt;chr&gt;,\n#   aid_data_parent_id &lt;chr&gt;, umbrella &lt;chr&gt;, financier_country &lt;chr&gt;,\n#   recipient &lt;chr&gt;, recipient_iso_3 &lt;chr&gt;, recipient_region &lt;chr&gt;,\n#   commitment_year &lt;int&gt;, implementation_start_year &lt;int&gt;,\n#   completion_year &lt;int&gt;, title &lt;chr&gt;, description &lt;chr&gt;,\n#   staff_comments &lt;chr&gt;, status &lt;chr&gt;, intent &lt;chr&gt;, flow_type &lt;chr&gt;, …\n\n\n\n\n\n\n\n\nNote\n\n\n\nUse desc() to sort in descending order. When sorting by multiple columns, each one is used as a tie-breaker for the previous ones.\n\n\n\n\n5.5.3 Verb 3. select(): Choosing Columns\nselect() helps you focus on specific variables. It’s particularly useful when you have datasets with many columns:\n\n# Using mini dataset: Select key columns\nmini_gcdf |&gt;\n  select(\n    recipient,\n    commitment_year,\n    amount_constant_usd_2021\n  )\n\n# A tibble: 10 × 3\n   recipient commitment_year amount_constant_usd_2021\n   &lt;chr&gt;               &lt;int&gt;                    &lt;dbl&gt;\n 1 Angola               2016              8147551108.\n 2 Angola               2010              3481817339.\n 3 Indonesia            2009              2853819092.\n 4 Indonesia            2017              2743140983.\n 5 Pakistan             2020              4855813054.\n 6 Pakistan             2021              4651162791.\n 7 Venezuela            2010             14402361186.\n 8 Venezuela            2010             13927269358.\n 9 Zambia               2017               881870586.\n10 Zambia               2017               881870586.\n\n# Real world example: Select columns by pattern\nget_gcdf3_dataset() |&gt;\n  select(\n    starts_with(\"amount\"),\n    contains(\"year\")\n  )\n\n# A tibble: 20,985 × 7\n   amount_original_currency amount_estimated amount_constant_usd_2021\n                      &lt;dbl&gt; &lt;chr&gt;                               &lt;dbl&gt;\n 1                550000000 &lt;NA&gt;                             7111456.\n 2                 12600000 Yes                             12600000 \n 3                 14400000 Yes                             14400000 \n 4                 13000000 &lt;NA&gt;                            13000000 \n 5                  7500000 &lt;NA&gt;                             7500000 \n 6                       NA &lt;NA&gt;                                  NA \n 7                  3600000 Yes                              3600000 \n 8                 30000000 &lt;NA&gt;                             4651163.\n 9                       NA &lt;NA&gt;                                  NA \n10                       NA &lt;NA&gt;                                  NA \n# ℹ 20,975 more rows\n# ℹ 4 more variables: amount_nominal_usd &lt;dbl&gt;, commitment_year &lt;int&gt;,\n#   implementation_start_year &lt;int&gt;, completion_year &lt;int&gt;\n\n\n\n\n\n\n\n\nHelpful select() Helpers\n\n\n\n\nstarts_with(): Columns starting with a prefix\nends_with(): Columns ending with a suffix\ncontains(): Columns containing a string\nmatches(): Columns matching a regular expression\neverything(): All remaining columns\n\n\n\n\n\n5.5.4 Verb 4. mutate(): Creating New Variables\nmutate() lets you create new columns based on existing ones. Let’s look at some examples:\n\n# Using mini dataset: Calculate billions and shares\nmini_gcdf |&gt;\n  group_by(recipient_region) |&gt;\n  mutate(\n    amount_bn = amount_constant_usd_2021 / 1e9,\n    share_of_region = amount_constant_usd_2021 / sum(amount_constant_usd_2021) * 100\n  ) |&gt;\n  ungroup()\n\n# A tibble: 10 × 7\n   recipient recipient_region sector_name commitment_year amount_constant_usd_…¹\n   &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                 &lt;int&gt;                  &lt;dbl&gt;\n 1 Angola    Africa           ENERGY                 2016            8147551108.\n 2 Angola    Africa           OTHER SOCI…            2010            3481817339.\n 3 Indonesia Asia             INDUSTRY, …            2009            2853819092.\n 4 Indonesia Asia             TRANSPORT …            2017            2743140983.\n 5 Pakistan  Asia             BANKING AN…            2020            4855813054.\n 6 Pakistan  Asia             BANKING AN…            2021            4651162791.\n 7 Venezuela America          OTHER MULT…            2010           14402361186.\n 8 Venezuela America          OTHER MULT…            2010           13927269358.\n 9 Zambia    Africa           ENERGY                 2017             881870586.\n10 Zambia    Africa           ENERGY                 2017             881870586.\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n# ℹ 2 more variables: amount_bn &lt;dbl&gt;, share_of_region &lt;dbl&gt;\n\n# Real world example: Year-over-year growth\nangola_annual_flows |&gt;\n  mutate(\n    prev_year_amount = lag(total_amount),\n    yoy_growth = (total_amount - prev_year_amount) / prev_year_amount * 100\n  )\n\n# A tibble: 21 × 4\n   commitment_year total_amount prev_year_amount yoy_growth\n             &lt;int&gt;        &lt;dbl&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n 1            2001    15087227.              NA        NA  \n 2            2002   489893161.        15087227.     3147. \n 3            2003    26796701.       489893161.      -94.5\n 4            2004   989972579.        26796701.     3594. \n 5            2005  2857495673.       989972579.      189. \n 6            2006  2453696747.      2857495673.      -14.1\n 7            2007  3895910151.      2453696747.       58.8\n 8            2008   198727773.      3895910151.      -94.9\n 9            2009  3388534669.       198727773.     1605. \n10            2010  4300740778.      3388534669.       26.9\n# ℹ 11 more rows\n\n\n\n\n\n\n\n\nWhat’s Happening Here?\n\n\n\nIn the regional shares example:\n\nGroup by region so calculations happen within each region\nConvert amounts to billions (divide by 1e9)\nCalculate each project’s share of its regional total\nRemove grouping when done\n\nIn the growth example:\n\nlag(total_amount) gets previous year’s value\nCalculate percent change from previous year\n\n\n\n\n\n5.5.5 Verb 5. summarize(): Creating Summaries\nsummarize() collapses groups into single rows. This is especially powerful when combined with group_by():\n\n# Using mini dataset: Regional summaries\nmini_gcdf |&gt;\n  group_by(recipient_region) |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021) / 1e9,\n    project_count = n(),\n    avg_amount_bn = mean(amount_constant_usd_2021) / 1e9,\n    .groups = \"drop\"\n  )\n\n# A tibble: 3 × 4\n  recipient_region total_amount_bn project_count avg_amount_bn\n  &lt;chr&gt;                      &lt;dbl&gt;         &lt;int&gt;         &lt;dbl&gt;\n1 Africa                      13.4             4          3.35\n2 America                     28.3             2         14.2 \n3 Asia                        15.1             4          3.78\n\n# Real world example: Annual lending by flow class\nget_gcdf3_dataset() |&gt;\n  filter(recommended_for_aggregates == \"Yes\") |&gt;\n  group_by(commitment_year, flow_class) |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021, na.rm = TRUE) / 1e9,\n    project_count = n(),\n    .groups = \"drop\"\n  )\n\n# A tibble: 66 × 4\n   commitment_year flow_class               total_amount_bn project_count\n             &lt;int&gt; &lt;chr&gt;                              &lt;dbl&gt;         &lt;int&gt;\n 1            2000 ODA-like                          1.44             138\n 2            2000 OOF-like                          3.99              34\n 3            2000 Vague (Official Finance)          0.0128             2\n 4            2001 ODA-like                          3.50             175\n 5            2001 OOF-like                          4.16              33\n 6            2001 Vague (Official Finance)          0.204              6\n 7            2002 ODA-like                          2.27             199\n 8            2002 OOF-like                          4.89              38\n 9            2002 Vague (Official Finance)          0.429              8\n10            2003 ODA-like                          3.52             236\n# ℹ 56 more rows\n\n\nCommon summary functions:\n\nsum(): Total values\nmean(): Average\nmedian(): Middle value\nsd(): Standard deviation\nn(): Count rows\nn_distinct(): Count unique values\n\n\n\n\n\n\n\nImportant\n\n\n\nAlways use na.rm = TRUE when working with financial data! Missing values are common and can break your calculations if not handled properly.",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#understanding-groups-a-powerful-way-to-organize-analysis",
    "href": "week_3_pre_class.html#understanding-groups-a-powerful-way-to-organize-analysis",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.6 Understanding Groups: A Powerful Way to Organize Analysis",
    "text": "5.6 Understanding Groups: A Powerful Way to Organize Analysis\nIf you’ve used Excel, you’re probably familiar with pivot tables - they let you organize data by categories and calculate summaries for each group. The group_by() function in R serves a similar purpose but is even more powerful. Just like in Excel when you:\n\nCreate a pivot table to see total lending by region\nCalculate what percent each project is of its country’s total\nFind the largest project in each sector\n\nIn R, group_by() lets you do all this and more. Let’s explore how it works using our mini dataset.\n\n5.6.1 Three Key Grouping Patterns\nThere are three main ways you’ll use grouping in your analysis:\n\nSummarize by Group: Calculate totals, averages, or counts for each group\nCalculate Within Groups: Create new columns based on group calculations\nFind Extremes Within Groups: Identify top/bottom values in each group\n\nLet’s look at each pattern:\n\n\n5.6.2 Pattern 1: Summarize by Group\nFirst, let’s see what happens without grouping:\n\n# Without grouping - one summary for everything\nmini_gcdf |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021) / 1e9,\n    avg_amount_bn = mean(amount_constant_usd_2021) / 1e9\n  )\n\n# A tibble: 1 × 2\n  total_amount_bn avg_amount_bn\n            &lt;dbl&gt;         &lt;dbl&gt;\n1            56.8          5.68\n\n# With grouping - summaries for each region\nmini_gcdf |&gt;\n  group_by(recipient_region) |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021) / 1e9,\n    avg_amount_bn = mean(amount_constant_usd_2021) / 1e9,\n    .groups = \"drop\"\n  )\n\n# A tibble: 3 × 3\n  recipient_region total_amount_bn avg_amount_bn\n  &lt;chr&gt;                      &lt;dbl&gt;         &lt;dbl&gt;\n1 Africa                      13.4          3.35\n2 America                     28.3         14.2 \n3 Asia                        15.1          3.78\n\n\n\n\n\n\n\n\nWhat’s Happening Here?\n\n\n\nWhen you group by recipient_region, R essentially:\n\nSplits the data into three pieces (Africa, America, Asia)\nRuns the calculations separately on each piece\nCombines the results back into one table\n\nThis is just like choosing “Region” as the row variable in a pivot table!\n\n\n\n\n5.6.3 Pattern 2: Calculate Within Groups\nSometimes you want to compare values within their group, like calculating each loan’s share of its regional total:\n\n# Calculate share of regional total\nmini_gcdf |&gt;\n  group_by(recipient_region) |&gt;\n  mutate(\n    region_total = sum(amount_constant_usd_2021),\n    share_of_region = amount_constant_usd_2021 / region_total * 100\n  ) |&gt;\n  select(recipient, recipient_region, amount_constant_usd_2021, share_of_region) |&gt;  # Just show relevant columns\n  ungroup()\n\n# A tibble: 10 × 4\n   recipient recipient_region amount_constant_usd_2021 share_of_region\n   &lt;chr&gt;     &lt;chr&gt;                               &lt;dbl&gt;           &lt;dbl&gt;\n 1 Angola    Africa                        8147551108.           60.8 \n 2 Angola    Africa                        3481817339.           26.0 \n 3 Indonesia Asia                          2853819092.           18.9 \n 4 Indonesia Asia                          2743140983.           18.2 \n 5 Pakistan  Asia                          4855813054.           32.1 \n 6 Pakistan  Asia                          4651162791.           30.8 \n 7 Venezuela America                      14402361186.           50.8 \n 8 Venezuela America                      13927269358.           49.2 \n 9 Zambia    Africa                         881870586.            6.58\n10 Zambia    Africa                         881870586.            6.58\n\n\n\n\n\n\n\n\nWhat’s Happening Here?\n\n\n\nFor each region:\n\nsum(amount_constant_usd_2021) adds up all loans in that region\nEach loan’s amount is divided by its region’s total\nThe share will always be between 0 and 100% within each region\n\nThis is similar to Excel’s “Show Values As” → “% of Parent Row Total” in pivot tables!\n\n\n\n\n5.6.4 Pattern 3: Find Extremes Within Groups\nOften you want to find the largest or smallest values within each group:\n\n# Largest loan in each region\nmini_gcdf |&gt;\n  group_by(recipient_region) |&gt;\n  slice_max(order_by = amount_constant_usd_2021, n = 1) |&gt;\n  ungroup()\n\n# A tibble: 3 × 5\n  recipient recipient_region sector_name  commitment_year amount_constant_usd_…¹\n  &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                  &lt;int&gt;                  &lt;dbl&gt;\n1 Angola    Africa           ENERGY                  2016            8147551108.\n2 Venezuela America          OTHER MULTI…            2010           14402361186.\n3 Pakistan  Asia             BANKING AND…            2020            4855813054.\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n\n# Real world example: Top 3 loans by region\nget_gcdf3_dataset() |&gt;\n  filter(\n    recommended_for_aggregates == \"Yes\",\n    !is.na(amount_constant_usd_2021)\n  ) |&gt;\n  group_by(recipient_region) |&gt;\n  slice_max(order_by = amount_constant_usd_2021, n = 3) |&gt;\n  select(recipient_region, recipient, amount_constant_usd_2021, commitment_year) |&gt;\n  ungroup()\n\n# A tibble: 22 × 4\n   recipient_region recipient             amount_constant_usd_…¹ commitment_year\n   &lt;chr&gt;            &lt;chr&gt;                                  &lt;dbl&gt;           &lt;int&gt;\n 1 Africa           Angola                           8147551108.            2016\n 2 Africa           Angola                           3481817339.            2010\n 3 Africa           Democratic Republic …            3094756963.            2008\n 4 America          Argentina                       21421774753.            2018\n 5 America          Argentina                       21270602003.            2019\n 6 America          Argentina                       21041856567.            2020\n 7 Asia             Turkmenistan                     6008040193.            2009\n 8 Asia             Kazakhstan                       5717197207.            2008\n 9 Asia             Kazakhstan                       5717197207.            2008\n10 Europe           Russia                          37225206222.            2013\n# ℹ 12 more rows\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n\n\n\n\n\n\n\n\nWhat’s Happening Here?\n\n\n\nFor each region: 1. Sort loans by amount (largest to smallest) 2. Keep the top one (n = 1) or top three (n = 3) 3. Move on to the next region\nThis is like filtering a pivot table to show only the maximum value in each group!\n\n\n\n\n5.6.5 The Importance of ungroup()\nNotice how we often end with ungroup()? This is important! When you group data:\n\nThe grouping stays active until you explicitly remove it\nThis can affect later calculations in unexpected ways\nungroup() removes the grouping when you’re done with it\n\nLet’s see what can go wrong:\n\n# THIS IS WRONG! (still grouped when calculating overall_share)\nmini_gcdf |&gt;\n  group_by(recipient_region) |&gt;\n  mutate(\n    # This gives regional share (correct)\n    region_share = amount_constant_usd_2021 / sum(amount_constant_usd_2021),\n    # This gives same result because we're still grouped! (wrong)\n    overall_share = amount_constant_usd_2021 / sum(amount_constant_usd_2021)\n  )\n\n# A tibble: 10 × 7\n# Groups:   recipient_region [3]\n   recipient recipient_region sector_name commitment_year amount_constant_usd_…¹\n   &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                 &lt;int&gt;                  &lt;dbl&gt;\n 1 Angola    Africa           ENERGY                 2016            8147551108.\n 2 Angola    Africa           OTHER SOCI…            2010            3481817339.\n 3 Indonesia Asia             INDUSTRY, …            2009            2853819092.\n 4 Indonesia Asia             TRANSPORT …            2017            2743140983.\n 5 Pakistan  Asia             BANKING AN…            2020            4855813054.\n 6 Pakistan  Asia             BANKING AN…            2021            4651162791.\n 7 Venezuela America          OTHER MULT…            2010           14402361186.\n 8 Venezuela America          OTHER MULT…            2010           13927269358.\n 9 Zambia    Africa           ENERGY                 2017             881870586.\n10 Zambia    Africa           ENERGY                 2017             881870586.\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n# ℹ 2 more variables: region_share &lt;dbl&gt;, overall_share &lt;dbl&gt;\n\n# THIS IS RIGHT! (ungroup before overall calculation)\nmini_gcdf |&gt;\n  group_by(recipient_region) |&gt;\n  mutate(\n    region_share = amount_constant_usd_2021 / sum(amount_constant_usd_2021)\n  ) |&gt;\n  ungroup() |&gt;\n  mutate(\n    overall_share = amount_constant_usd_2021 / sum(amount_constant_usd_2021)\n  )\n\n# A tibble: 10 × 7\n   recipient recipient_region sector_name commitment_year amount_constant_usd_…¹\n   &lt;chr&gt;     &lt;chr&gt;            &lt;chr&gt;                 &lt;int&gt;                  &lt;dbl&gt;\n 1 Angola    Africa           ENERGY                 2016            8147551108.\n 2 Angola    Africa           OTHER SOCI…            2010            3481817339.\n 3 Indonesia Asia             INDUSTRY, …            2009            2853819092.\n 4 Indonesia Asia             TRANSPORT …            2017            2743140983.\n 5 Pakistan  Asia             BANKING AN…            2020            4855813054.\n 6 Pakistan  Asia             BANKING AN…            2021            4651162791.\n 7 Venezuela America          OTHER MULT…            2010           14402361186.\n 8 Venezuela America          OTHER MULT…            2010           13927269358.\n 9 Zambia    Africa           ENERGY                 2017             881870586.\n10 Zambia    Africa           ENERGY                 2017             881870586.\n# ℹ abbreviated name: ¹​amount_constant_usd_2021\n# ℹ 2 more variables: region_share &lt;dbl&gt;, overall_share &lt;dbl&gt;\n\n\n\n\n\n\n\n\nWhen to ungroup()\n\n\n\n\nAfter summarize(): Usually automatic (but watch for warnings)\nAfter mutate(): If you’re done with group calculations\nAfter slice_*(): Almost always\nWhen in doubt: ungroup()! It never hurts.\n\n\n\n\n\n5.6.6 Real World Example: Time Series Analysis\nLet’s apply these patterns to analyze year-over-year changes in Angola’s loan commitments:\n\n# Calculate year-over-year changes\nangola_annual_flows |&gt;\n  mutate(\n    prev_year_amount = lag(total_amount),\n    yoy_change = (total_amount - prev_year_amount) / prev_year_amount * 100\n  ) |&gt;\n  filter(!is.na(yoy_change))  # Remove first year (no previous year to compare)\n\n# A tibble: 20 × 4\n   commitment_year total_amount prev_year_amount yoy_change\n             &lt;int&gt;        &lt;dbl&gt;            &lt;dbl&gt;      &lt;dbl&gt;\n 1            2002   489893161.        15087227.    3147.  \n 2            2003    26796701.       489893161.     -94.5 \n 3            2004   989972579.        26796701.    3594.  \n 4            2005  2857495673.       989972579.     189.  \n 5            2006  2453696747.      2857495673.     -14.1 \n 6            2007  3895910151.      2453696747.      58.8 \n 7            2008   198727773.      3895910151.     -94.9 \n 8            2009  3388534669.       198727773.    1605.  \n 9            2010  4300740778.      3388534669.      26.9 \n10            2011  2764770648.      4300740778.     -35.7 \n11            2012  1567120325.      2764770648.     -43.3 \n12            2013  5155360714.      1567120325.     229.  \n13            2014  4980964328.      5155360714.      -3.38\n14            2015  6206188709.      4980964328.      24.6 \n15            2016 17920526346.      6206188709.     189.  \n16            2017  2999075287.     17920526346.     -83.3 \n17            2018  4340735198.      2999075287.      44.7 \n18            2019   119578481.      4340735198.     -97.2 \n19            2020    64776546.       119578481.     -45.8 \n20            2021    79700000         64776546.      23.0 \n\n\n\n\n\n\n\n\nWhat’s Happening Here?\n\n\n\n\nlag(total_amount) gets the previous year’s value\nCalculate percent change from previous year\nRemove the first year (which has no previous year)\n\nThis kind of analysis is common when looking at lending trends over time!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#common-transformation-patterns-in-development-finance",
    "href": "week_3_pre_class.html#common-transformation-patterns-in-development-finance",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.7 Common Transformation Patterns in Development Finance",
    "text": "5.7 Common Transformation Patterns in Development Finance\nNow that we understand both the basic operations and grouping, let’s look at some common patterns you’ll use when analyzing Chinese development finance data:\n\n5.7.1 Pattern 1: Annual Flows By Region\nThis pattern helps understand how lending varies across regions and time:\n\nget_gcdf3_dataset() |&gt;\n  filter(recommended_for_aggregates == \"Yes\") |&gt;\n  group_by(commitment_year, recipient_region) |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021, na.rm = TRUE) / 1e9,\n    project_count = n(),\n    avg_project_size_bn = mean(amount_constant_usd_2021, na.rm = TRUE) / 1e9,\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(recipient_region, commitment_year)\n\n# A tibble: 147 × 5\n   commitment_year recipient_region total_amount_bn project_count\n             &lt;int&gt; &lt;chr&gt;                      &lt;dbl&gt;         &lt;int&gt;\n 1            2000 Africa                      1.35            80\n 2            2001 Africa                      3.09           110\n 3            2002 Africa                      2.68           126\n 4            2003 Africa                      4.24           144\n 5            2004 Africa                      2.64           150\n 6            2005 Africa                      7.10           215\n 7            2006 Africa                      7.42           274\n 8            2007 Africa                     15.9            351\n 9            2008 Africa                     12.4            295\n10            2009 Africa                     16.5            342\n# ℹ 137 more rows\n# ℹ 1 more variable: avg_project_size_bn &lt;dbl&gt;\n\n\n\n\n5.7.2 Pattern 2: Portfolio Composition\nUnderstanding the sectoral focus of lending:\n\nget_gcdf3_dataset() |&gt;\n  filter(\n    recommended_for_aggregates == \"Yes\",\n    commitment_year &gt;= 2018  # Focus on recent years\n  ) |&gt;\n  group_by(sector_name) |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021, na.rm = TRUE) / 1e9,\n    project_count = n(),\n    avg_amount_bn = mean(amount_constant_usd_2021, na.rm = TRUE) / 1e9,\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(desc(total_amount_bn)) |&gt;\n  slice_head(n = 10)  # Top 10 sectors\n\n# A tibble: 10 × 4\n   sector_name                    total_amount_bn project_count avg_amount_bn\n   &lt;chr&gt;                                    &lt;dbl&gt;         &lt;int&gt;         &lt;dbl&gt;\n 1 BANKING AND FINANCIAL SERVICES          143.             163       0.897  \n 2 INDUSTRY, MINING, CONSTRUCTION           56.5            205       0.304  \n 3 TRANSPORT AND STORAGE                    54.7            315       0.215  \n 4 ENERGY                                   43.4            210       0.241  \n 5 GENERAL BUDGET SUPPORT                   24.0             43       0.572  \n 6 COMMUNICATIONS                            7.78           124       0.101  \n 7 UNALLOCATED/UNSPECIFIED                   7.06            70       0.116  \n 8 BUSINESS AND OTHER SERVICES               6.80            78       0.101  \n 9 OTHER MULTISECTOR                         5.59           101       0.119  \n10 HEALTH                                    4.23          2314       0.00311\n\n\n\n\n5.7.3 Pattern 3: Country Risk Analysis\nAnalyzing lending patterns for specific countries:\n\nget_gcdf3_dataset() |&gt;\n  filter(\n    recommended_for_aggregates == \"Yes\",\n    recipient %in% c(\"Angola\", \"Kenya\", \"Ethiopia\")\n  ) |&gt;\n  group_by(recipient, flow_class) |&gt;\n  summarize(\n    total_amount_bn = sum(amount_constant_usd_2021, na.rm = TRUE) / 1e9,\n    project_count = n(),\n    .groups = \"drop\"\n  ) |&gt;\n  arrange(recipient, desc(total_amount_bn))\n\n# A tibble: 9 × 4\n  recipient flow_class               total_amount_bn project_count\n  &lt;chr&gt;     &lt;chr&gt;                              &lt;dbl&gt;         &lt;int&gt;\n1 Angola    OOF-like                          54.8             202\n2 Angola    Vague (Official Finance)          10.0              65\n3 Angola    ODA-like                           0.310           101\n4 Ethiopia  OOF-like                          18.0              64\n5 Ethiopia  ODA-like                           3.09            187\n6 Ethiopia  Vague (Official Finance)           0.276            10\n7 Kenya     OOF-like                           9.56             42\n8 Kenya     ODA-like                           2.80            152\n9 Kenya     Vague (Official Finance)           0.884            14",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#practice-exercises",
    "href": "week_3_pre_class.html#practice-exercises",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.8 Practice Exercises",
    "text": "5.8 Practice Exercises\nTry these exercises to get comfortable with data transformation. Remember to use AI tools if you get stuck!\n\n5.8.1 Exercise 1: Basic Filtering\nFind all projects that are:\n\nODA-like or OOF-like\nCommitted between 2018-2021\nWorth at least $100 million\n\n\n\n5.8.2 Exercise 2: Regional Analysis\nFor each region, calculate:\n\nTotal lending volume\nNumber of projects\nAverage project size\nNumber of recipient countries\n\n\n\n5.8.3 Exercise 3: Sector Trends\nAnalyze how sector composition has changed:\n\nCompare 2013-2017 vs 2018-2021\nLook at both volume and project counts\nFocus on the top 5 sectors by volume\n\n\n\n\n\n\n\nGetting Help\n\n\n\nIf you get stuck:\n\nCheck the dplyr cheatsheet\nAsk AI tools for help\nLook at similar examples in this guide\nPost questions in our course Slack",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#resources-for-learning-more",
    "href": "week_3_pre_class.html#resources-for-learning-more",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.9 Resources for Learning More",
    "text": "5.9 Resources for Learning More\n\n5.9.1 Essential References\n\nR for Data Science - Data Transformation\n\nComprehensive guide to dplyr\nMany practical examples\nFree online!\n\ndplyr cheatsheet\n\nQuick reference for common operations\nGreat to keep handy while working\n\n\n\n\n5.9.2 Video Tutorials\n\nAnimated versions of common dplyr functions\n\nClear, beginner-friendly overview\nShows live coding examples\nPerfect for visual learners",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "week_3_pre_class.html#next-steps",
    "href": "week_3_pre_class.html#next-steps",
    "title": "5  Week 3: Find Actionable Insights, Quickly (Pre-Class)",
    "section": "5.10 Next Steps",
    "text": "5.10 Next Steps\nIn our class session, we’ll:\n\nReview any questions about these concepts\nPractice more complex transformations\nWork with real analysis questions\nLearn some advanced dplyr features\n\nRemember: The goal isn’t to memorize every function, but to understand the basic patterns of data transformation. With these five core verbs and the pipe operator, you can handle most analysis tasks!",
    "crumbs": [
      "Part 1: Data Analysis Bootcamp",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Week 3: Find Actionable Insights, Quickly (Pre-Class)</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "10  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Summary</span>"
    ]
  }
]